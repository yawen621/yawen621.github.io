<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020年前端面试复习必读精选文章(8)</title>
      <link href="/2020/11/17/sort-algorithms8/"/>
      <url>/2020/11/17/sort-algorithms8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-设计模式"><a href="#1-1-设计模式" class="headerlink" title="1.1 设计模式"></a>1.1 设计模式</h3><hr><h4 id="介绍下了解的设计模式及应用场景"><a href="#介绍下了解的设计模式及应用场景" class="headerlink" title="介绍下了解的设计模式及应用场景"></a>介绍下了解的设计模式及应用场景</h4><h5 id="一-理解工厂模式"><a href="#一-理解工厂模式" class="headerlink" title="一.理解工厂模式"></a>一.理解工厂模式</h5><p>工厂模式类似于现实生活中的工厂可以产生大量相似的商品，去做同样的事情，实现同样的效果;这时候需要使用工厂模式。</p><p>简单的工厂模式可以理解为解决多个相似的问题;这也是她的优点;比如如下代码： </p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">CreatePerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span>var p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"longen"</span><span class="token punctuation">,</span><span class="token string">'28'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"tugenhua"</span><span class="token punctuation">,</span><span class="token string">'27'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 28</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 男</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tugenhua</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 27</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 女</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tugenhua</span><span class="token comment" spellcheck="true">// 返回都是object 无法识别对象的类型 不知道他们是哪个对象的实列</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 instanceof Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码：函数CreatePerson能接受三个参数name,age,sex等参数，可以无数次调用这个函数，每次返回都会包含三个属性和一个方法的对象。</p><p>工厂模式是为了解决多个类似对象声明的问题;也就是为了解决实列化对象产生重复的问题。</p><p>优点：能解决多个相似的问题。</p><p>缺点：不能知道对象识别的问题(对象的类型不知道)。</p><p>复杂的工厂模式定义是：将其成员对象的实列化推迟到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。</p><p> 父类只对创建过程中的一般性问题进行处理，这些处理会被子类继承，子类之间是相互独立的，具体的业务逻辑会放在子类中进行编写。</p><p> 父类就变成了一个抽象类，但是父类可以执行子类中相同类似的方法，具体的业务逻辑需要放在子类中去实现；比如我现在开几个自行车店，那么每个店都有几种型号的自行车出售。我们现在来使用工厂模式来编写这些代码;</p><p>父类的构造函数如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义自行车的构造函数</span>var BicycleShop <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BicycleShop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token operator">:</span> BicycleShop<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*    * 买自行车这个方法    * @param {model} 自行车型号    */</span>    sellBicycle<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">{</span>        var bicycle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBicycle</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行A业务逻辑</span>        bicycle<span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行B业务逻辑</span>        bicycle<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    createBicycle<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"父类是抽象类不能直接调用，需要子类重写该方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是定义一个自行车抽象类来编写工厂模式的实列，定义了createBicycle这个方法，但是如果直接实例化父类，调用父类中的这个createBicycle方法,会抛出一个error，因为父类是一个抽象类，他不能被实列化，只能通过子类来实现这个方法，实现自己的业务逻辑，下面我们来定义子类，我们学会如何使用工厂模式重新编写这个方法，首先我们需要继承父类中的成员，然后编写子类;如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义自行车的构造函数</span>var BicycleShop <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BicycleShop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token operator">:</span> BicycleShop<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*     * 买自行车这个方法     * @param {model} 自行车型号    */</span>    sellBicycle<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">{</span>            var bicycle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBicycle</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行A业务逻辑</span>            bicycle<span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行B业务逻辑</span>            bicycle<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        createBicycle<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"父类是抽象类不能直接调用，需要子类重写该方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实现原型继承</span>    function <span class="token function">extend</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>Sup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Sub表示子类，Sup表示超类</span>        <span class="token comment" spellcheck="true">// 首先定义一个空函数</span>        var F <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置空函数的原型为超类的原型</span>        F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Sup<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 实例化空函数，并把超类原型引用传递给子类</span>        Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重置子类原型的构造器为子类自身</span>        Sub<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在子类中保存超类的原型,避免子类与超类耦合</span>        Sub<span class="token punctuation">.</span>sup <span class="token operator">=</span> Sup<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Sup<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span><span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检测超类原型的构造器是否为原型自身</span>            Sup<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sup<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    var BicycleChild <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承构造函数父类中的属性和方法</span>        BicycleShop<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 子类继承父类原型方法</span>    <span class="token function">extend</span><span class="token punctuation">(</span>BicycleChild<span class="token punctuation">,</span>BicycleShop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// BicycleChild 子类重写父类的方法</span>BicycleChild<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createBicycle <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var A <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行A业务操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    var B <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行B业务操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        A<span class="token operator">:</span> A<span class="token punctuation">,</span>        B<span class="token operator">:</span> B    <span class="token punctuation">}</span><span class="token punctuation">}</span>var childClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">BicycleChild</span><span class="token punctuation">(</span><span class="token string">"龙恩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例化子类，然后打印出该实例, 如下截图所示：<br><img src="/medias/avatars/1.png" alt><br>console.log(childClass.name);  // 龙恩</p><p>// 下面是实例化后 执行父类中的sellBicycle这个方法后会依次调用父类中的A</p><p>// 和B方法；A方法和B方法依次在子类中去编写具体的业务逻辑。</p><p>childClass.sellBicycle(“mode”); // 打印出  执行A业务操作和执行B业务操作</p><p>上面只是”龙恩”自行车这么一个型号的，如果需要生成其他型号的自行车的话，可以编写其他子类，工厂模式最重要的优点是：可以实现一些相同的方法，这些相同的方法我们可以放在父类中编写代码，那么需要实现具体的业务逻辑，那么可以放在子类中重写该父类的方法，去实现自己的业务逻辑；使用专业术语来讲的话有2点：第一：弱化对象间的耦合，防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。第二：重复性的代码可以放在父类去编写，子类继承于父类的所有成员属性和方法，子类只专注于实现自己的业务逻辑。</p><h5 id="二-理解单体模式"><a href="#二-理解单体模式" class="headerlink" title="二.理解单体模式"></a>二.理解单体模式</h5><p>单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。</p><p>单体模式的优点是：<br>    1.可以用来划分命名空间，减少全局变量的数量。<br>    2.使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。<br>    3.可以被实例化，且实例化一次。</p><p>什么是单体模式？单体模式是一个用来划分命名空间并将一批属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。</p><p>但是并非所有的对象字面量都是单体，比如说模拟数组或容纳数据的话，那么它就不是单体，但是如果是组织一批相关的属性和方法在一起的话，那么它有可能是单体模式，所以这需要看开发者编写代码的意图；</p><p>下面我们来看看定义一个对象字面量(结构类似于单体模式)的基本结构如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 对象字面量</span>var Singleton <span class="token operator">=</span> <span class="token punctuation">{</span>    attr1<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    attr2<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    method1<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attr1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    method2<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attr2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面只是简单的字面量结构，上面的所有成员变量都是通过Singleton来访问的，但是它并不是单体模式；因为单体模式还有一个更重要的特点，就是可以仅被实例化一次，上面的只是不能被实例化的一个类，因此不是单体模式；对象字面量是用来创建单体模式的方法之一；</p><p>使用单体模式的结构如下demo</p><p>我们明白的是单体模式如果有实例化的话，那么只实例化一次，要实现一个单体模式的话，我们无非就是使用一个变量来标识该类是否被实例化，如果未被实例化的话，那么我们可以实例化一次，否则的话，直接返回已经被实例化的对象。</p><p>如下代码是单体模式的基本结构：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 单体模式</span>var Singleton <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Singleton<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取实例对象</span>function <span class="token function">getInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试单体模式的实例</span>var a <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var b <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>// 因为单体模式是只实例化一次，所以下面的实例是相等的</p><p>console.log(a === b); // true</p><p>由于单体模式只实例化一次，因此第一次调用，返回的是a实例对象，当我们继续调用的时候，b的实例就是a的实例，因此下面都是打印的是aa；</p><p>console.log(a.getName());// aa</p><p>console.log(b.getName());// aa</p><p>上面的封装单体模式也可以改成如下结构写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 单体模式</span>var Singleton <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Singleton<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取实例对象</span>var getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试单体模式的实例</span>var a <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var b <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>// 因为单体模式是只实例化一次，所以下面的实例是相等的</p><p>console.log(a === b); // true</p><p>console.log(a.getName());// aa</p><p>console.log(b.getName());// aa</p><p>理解使用代理实现单列模式的好处<br>    比如我现在页面上需要创建一个div的元素，那么我们肯定需要有一个创建div的函数，而现在我只需要这个函数只负责创建div元素，其他的它不想管，也就是想实现单一职责原则，就好比淘宝的kissy一样，一开始的时候他们定义kissy只做一件事，并且把这件事做好，具体的单体模式中的实例化类的事情交给代理函数去处理，这样做的好处是具体的业务逻辑分开了，代理只管代理的业务逻辑，在这里代理的作用是实例化对象，并且只实例化一次; 创建div代码只管创建div，其他的不管；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 单体模式</span>var CreateDiv <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CreateDiv<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理实现单体模式</span>var ProxyMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CreateDiv</span><span class="token punctuation">(</span><span class="token string">"我来测试下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ProxyMode</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ProxyMode</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解使用单体模式来实现弹窗的基本原理</p><p>下面我们继续来使用单体模式来实现一个弹窗的demo；我们先不讨论使用单体模式来实现，我们想下我们平时是怎么编写代码来实现弹窗效果的; 比如我们有一个弹窗，默认的情况下肯定是隐藏的，当我点击的时候，它需要显示出来；如下编写代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实现弹窗</span>var createWindow <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"我是弹窗内容"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> div<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点击后先创建一个div元素</span>    var win <span class="token operator">=</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上的代码；大家可以看看，有明显的缺点，比如我点击一个元素需要创建一个div，我点击第二个元素又会创建一次div，我们频繁的点击某某元素，他们会频繁的创建div的元素，虽然当我们点击关闭的时候可以移除弹出代码，但是呢我们频繁的创建和删除并不好，特别对于性能会有很大的影响，对DOM频繁的操作会引起重绘等，从而影响性能；因此这是非常不好的习惯；我们现在可以使用单体模式来实现弹窗效果，我们只实例化一次就可以了；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实现单体模式弹窗</span>var createWindow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var div<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>div<span class="token punctuation">)</span> <span class="token punctuation">{</span>            div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"我是弹窗内容"</span><span class="token punctuation">;</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> div<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点击后先创建一个div元素</span>    var win <span class="token operator">=</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解编写通用的单体模式</p><p>上面的弹窗的代码虽然完成了使用单体模式创建弹窗效果，但是代码并不通用，比如上面是完成弹窗的代码，假如我们以后需要在页面中一个iframe呢？我们是不是需要重新写一套创建iframe的代码呢？比如如下创建iframe：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var createIframe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var iframe<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>iframe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> iframe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到如上代码，创建div的代码和创建iframe代码很类似，我们现在可以考虑把通用的代码分离出来，使代码变成完全抽象，我们现在可以编写一套代码封装在getInstance函数内，如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var getInstance <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var result<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> result <span class="token operator">||</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码：我们使用一个参数fn传递进去，如果有result这个实例的话，直接返回，否则的话，当前的getInstance函数调用fn这个函数，是this指针指向与这个fn这个函数；之后返回被保存在result里面；现在我们可以传递一个函数进去，不管他是创建div也好，还是创建iframe也好，总之如果是这种的话，都可以使用getInstance来获取他们的实例对象；</p><p>如下测试创建iframe和创建div的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 创建div</span>var createWindow <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"我是弹窗内容"</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> div<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建iframe</span>var createIframe <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> iframe<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取实例的封装代码</span>var getInstance <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var result<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> result <span class="token operator">||</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试创建div</span>var createSingleDiv <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>createWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var win <span class="token operator">=</span> <span class="token function">createSingleDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试创建iframe</span>var createSingleIframe <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>createIframe<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var win <span class="token operator">=</span> <span class="token function">createSingleIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://cnblogs.com"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三-理解模块模式"><a href="#三-理解模块模式" class="headerlink" title="三.理解模块模式"></a>三.理解模块模式</h5><p>我们通过单体模式理解了是以对象字面量的方式来创建单体模式的；比如如下的对象字面量的方式代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var singleMode <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> value<span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用；如下就是一个模块模式的代码结构：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var singleMode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建私有变量</span>    var privateNum <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建私有函数</span>    function <span class="token function">privateFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现自己的业务逻辑代码</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回一个对象包含公有方法和属性</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        publicMethod1<span class="token operator">:</span> publicMethod1<span class="token punctuation">,</span>        publicMethod2<span class="token operator">:</span> publicMethod1    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。</p><p>我们什么时候使用模块模式？</p><p>如果我们必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么我们这个时候就可以使用模块模式了。</p><p>理解增强的模块模式</p><p>增强的模块模式的使用场合是：适合那些单列必须是某种类型的实例，同时还必须添加某些属性或方法对其加以增强的情况。比如如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">CustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"tugenhua"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CustomType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span>var application <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义私有</span>    var privateA <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义私有函数</span>    function <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化一个对象后，返回该实例，然后为该实例增加一些公有属性和方法</span>    var object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加公有属性</span>    object<span class="token punctuation">.</span>A <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加公有方法</span>    object<span class="token punctuation">.</span>B <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> privateA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回该对象</span>    <span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来打印下application该对象；如下：</p><p>console.log(application);<br><img src="/medias/avatars/2.png" alt><br>继续打印该公有属性和方法如下：</p><p>console.log(application.A);// aa</p><p>console.log(application.B()); // aa</p><p>console.log(application.name); // tugenhua</p><p>console.log(application.getName());// tugenhua</p><h5 id="四-理解代理模式"><a href="#四-理解代理模式" class="headerlink" title="四.理解代理模式"></a>四.理解代理模式</h5><p> 代理是一个对象，它可以用来控制对本体对象的访问，它与本体对象实现了同样的接口，代理对象会把所有的调用方法传递给本体对象的；代理模式最基本的形式是对访问进行控制，而本体对象则负责执行所分派的那个对象的函数或者类，简单的来讲本地对象注重的去执行页面上的代码，代理则控制本地对象何时被实例化，何时被使用；我们在上面的单体模式中使用过一些代理模式，就是使用代理模式实现单体模式的实例化，其他的事情就交给本体对象去处理；</p><p>代理的优点：</p><p>代理对象可以代替本体被实例化，并使其可以被远程访问；<br>它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；<br>我们先来理解代理对象代替本体对象被实例化的列子；比如现在京东ceo想送给奶茶妹一个礼物，但是呢假如该ceo不好意思送，或者由于工作忙没有时间送，那么这个时候他就想委托他的经纪人去做这件事，于是我们可以使用代理模式来编写如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 先申明一个奶茶妹对象</span>var TeaAndMilkGirl <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这是京东ceo先生</span>var Ceo <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 送结婚礼物 给奶茶妹</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sendMarriageRing <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>ring<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", ceo送你一个礼物："</span> <span class="token operator">+</span> ring<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 京东ceo的经纪人是代理，来代替送</span>var ProxyObj <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 经纪人代理送礼物给奶茶妹</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sendGift <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代理模式负责本体对象实例化</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Ceo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>girl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMarriageRing</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化</span>var proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ProxyObj</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TeaAndMilkGirl</span><span class="token punctuation">(</span><span class="token string">"奶茶妹"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span><span class="token function">sendGift</span><span class="token punctuation">(</span><span class="token string">"结婚戒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hi 奶茶妹, ceo送你一个礼物：结婚戒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码如上的基本结构，TeaAndMilkGirl 是一个被送的对象(这里是奶茶妹)；Ceo 是送礼物的对象，他保存了奶茶妹这个属性，及有一个自己的特权方法sendMarriageRing 就是送礼物给奶茶妹这么一个方法；然后呢他是想通过他的经纪人去把这件事完成，于是需要创建一个经济人的代理模式，名字叫ProxyObj ；他的主要做的事情是，把ceo交给他的礼物送给ceo的情人，因此该对象同样需要保存ceo情人的对象作为自己的属性，同时也需要一个特权方法sendGift ，该方法是送礼物，因此在该方法内可以实例化本体对象，这里的本体对象是ceo送花这件事情，因此需要实例化该本体对象后及调用本体对象的方法(sendMarriageRing).</p><p>最后我们初始化是需要代理对象ProxyObj；调用ProxyObj 对象的送花这个方法(sendGift)即可；</p><p>对于我们提到的优点，第二点的话，我们下面可以来理解下虚拟代理，虚拟代理用于控制对那种创建开销很大的本体访问，它会把本体的实例化推迟到有方法被调用的时候；比如说现在有一个对象的实例化很慢的话，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让他把该对象的实例推迟到需要的时候。</p><p>理解使用虚拟代理实现图片的预加载</p><p>在网页开发中，图片的预加载是一种比较常用的技术，如果直接给img标签节点设置src属性的话，如果图片比较大的话，或者网速相对比较慢的话，那么在图片未加载完之前，图片会有一段时间是空白的场景，这样对于用户体验来讲并不好，那么这个时候我们可以在图片未加载完之前我们可以使用一个loading加载图片来作为一个占位符，来提示用户该图片正在加载，等图片加载完后我们可以对该图片直接进行赋值即可；下面我们先不用代理模式来实现图片的预加载的情况下代码如下：</p><p>第一种方案：不使用代理的预加载图片函数如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 不使用代理的预加载图片函数如下</span>var myImage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var imgNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    var img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        setSrc<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif"</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用方式</span>myImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码是不使用代理模式来实现的代码；</p><p>第二种方案：使用代理模式来编写预加载图片的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var myImage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var imgNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        setSrc<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理模式</span>var ProxyImage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        myImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        setSrc<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         myImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用方式</span>ProxyImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方案是使用一般的编码方式实现图片的预加载技术，首先创建imgNode元素，然后调用myImage.setSrc该方法的时候，先给图片一个预加载图片，当图片加载完的时候，再给img元素赋值，第二种方案是使用代理模式来实现的，myImage 函数只负责创建img元素，代理函数ProxyImage 负责给图片设置loading图片，当图片真正加载完后的话，调用myImage中的myImage.setSrc方法设置图片的路径；他们之间的优缺点如下：</p><pre><code>1.第一种方案一般的方法代码的耦合性太高，一个函数内负责做了几件事情，比如创建img元素，和实现给未加载图片完成之前设置loading加载状态等多项事情，未满足面向对象设计原则中单一职责原则；并且当某个时候不需要代理的时候，需要从myImage 函数内把代码删掉，这样代码耦合性太高。2.第二种方案使用代理模式，其中myImage 函数只负责做一件事，创建img元素加入到页面中，其中的加载loading图片交给代理函数ProxyImage 去做，当图片加载成功后，代理函数ProxyImage 会通知及执行myImage 函数的方法，同时当以后不需要代理对象的话，我们直接可以调用本体对象的方法即可；</code></pre><p>从上面代理模式我们可以看到，代理模式和本体对象中有相同的方法setSrc,这样设置的话有如下2个优点：</p><pre><code>1.用户可以放心地请求代理，他们只关心是否能得到想要的结果。假如我门不需要代理对象的话，直接可以换成本体对象调用该方法即可。2.在任何使用本体对象的地方都可以替换成使用代理。</code></pre><p>当然如果代理对象和本体对象都返回一个匿名函数的话，那么也可以认为他们也具有一直的接口；比如如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var myImage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var imgNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>        imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理模式</span>var ProxyImage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">myImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">myImage</span><span class="token punctuation">(</span><span class="token string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用方式</span><span class="token function">ProxyImage</span><span class="token punctuation">(</span><span class="token string">"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虚拟代理合并http请求的理解：</p><p>   比如在做后端系统中，有表格数据，每一条数据前面有复选框按钮，当点击复选框按钮时候，需要获取该id后需要传递给给服务器发送ajax请求，服务器端需要记录这条数据，去请求，如果我们每当点击一下向服务器发送一个http请求的话，对于服务器来说压力比较大，网络请求比较频繁，但是如果现在该系统的实时数据不是很高的话，我们可以通过一个代理函数收集一段时间内(比如说2-3秒)的所有id，一次性发ajax请求给服务器，相对来说网络请求降低了, 服务器压力减少了;</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 首先html结构如下：</span><span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>选择框<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"j-input"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>选择框<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"j-input"</span> data<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token string">"2"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>选择框<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"j-input"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>label<span class="token operator">></span>选择框<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"j-input"</span> data<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token string">"4"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般的情况下 JS如下编写</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">&lt;</span>script<span class="token operator">></span>    var checkboxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"j-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> checkboxs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            checkboxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如下是ajax请求</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们通过虚拟代理的方式，延迟2秒，在2秒后获取所有被选中的复选框的按钮id，一次性给服务器发请求。</p><p>  通过点击页面的复选框，选中的时候增加一个属性isflag，没有选中的时候删除该属性isflag，然后延迟个2秒，在2秒后重新判断页面上所有复选框中有isflag的属性上的id，存入数组，然后代理函数调用本体函数的方法，把延迟2秒后的所有id一次性发给本体方法，本体方法可以获取所有的id，可以向服务器端发送ajax请求，这样的话，服务器的请求压力相对来说减少了。</p><p>代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 本体函数</span>var mainFunc <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 即可打印被选中的所有的id</span>    <span class="token comment" spellcheck="true">// 再把所有的id一次性发ajax请求给服务器端</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理函数 通过代理函数获取所有的id 传给本体函数去执行</span>var proxyFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 保存一段时间内的id</span>        timer <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定时器</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span>checkboxs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断如果定时器有的话，不进行覆盖操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在2秒内获取所有被选中的id，通过属性isflag判断是否被选中</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> checkboxs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>checkboxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"isflag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var id <span class="token operator">=</span> checkboxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">mainFunc</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2秒后需要给本体函数传递所有的id</span>            <span class="token comment" spellcheck="true">// 清空定时器</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            timer <span class="token operator">=</span> null<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var checkboxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"j-input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> checkboxs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        checkboxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 给当前增加一个属性</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"isflag"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'isflag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用代理函数</span>            <span class="token function">proxyFunc</span><span class="token punctuation">(</span>checkboxs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解缓存代理：</p><p>   缓存代理的含义就是对第一次运行时候进行缓存，当再一次运行相同的时候，直接从缓存里面取，这样做的好处是避免重复一次运算功能，如果运算非常复杂的话，对性能很耗费，那么使用缓存对象可以提高性能;我们可以先来理解一个简单的缓存列子，就是网上常见的加法和乘法的运算。代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 计算乘法</span>var mult <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> a<span class="token operator">*</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算加法</span>var plus <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代理函数</span>var proxyFunc <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 缓存对象</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args in cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用缓存代理</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var proxyMult <span class="token operator">=</span> <span class="token function">proxyFunc</span><span class="token punctuation">(</span>mult<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyMult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 24</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyMult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓存取 24</span>var proxyPlus <span class="token operator">=</span> <span class="token function">proxyFunc</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">proxyPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 缓存取 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="五-理解职责链模式"><a href="#五-理解职责链模式" class="headerlink" title="五.理解职责链模式"></a>五.理解职责链模式</h5><p>优点是：消除请求的发送者与接收者之间的耦合。</p><pre><code>职责连是由多个不同的对象组成的，发送者是发送请求的对象，而接收者则是链中那些接收这种请求并且对其进行处理或传递的对象。请求本身有时候也可以是一个对象，它封装了和操作有关的所有数据，基本实现流程如下：</code></pre><ol><li><p>发送者知道链中的第一个接收者，它向这个接收者发送该请求。</p></li><li><p>每一个接收者都对请求进行分析，然后要么处理它，要么它往下传递。</p></li><li><p>每一个接收者知道其他的对象只有一个，即它在链中的下家(successor)。</p></li><li><p>如果没有任何接收者处理请求，那么请求会从链中离开。</p><p>我们可以理解职责链模式是处理请求组成的一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象称为链中的节点。比如对象A给对象B发请求，如果B对象不处理，它就会把请求交给C，如果C对象不处理的话，它就会把请求交给D，依次类推，直到有一个对象能处理该请求为止，当然没有任何对象处理该请求的话，那么请求就会从链中离开。</p><p>比如常见的一些外包公司接到一个项目，那么接到项目有可能是公司的负责项目的人或者经理级别的人，经理接到项目后自己不开发，直接把它交到项目经理来开发，项目经理自己肯定不乐意自己动手开发哦，它就把项目交给下面的码农来做，所以码农来处理它，如果码农也不处理的话，那么这个项目可能会直接挂掉了，但是最后完成后，外包公司它并不知道这些项目中的那一部分具体有哪些人开发的，它并不知道，也并不关心的，它关心的是这个项目已交给外包公司已经开发完成了且没有任何bug就可以了；所以职责链模式的优点就在这里：</p></li></ol><p>消除请求的发送者(需要外包项目的公司)与接收者(外包公司)之间的耦合。</p><p>下面列举个列子来说明职责链的好处：</p><p>天猫每年双11都会做抽奖活动的，比如阿里巴巴想提高大家使用支付宝来支付的话，每一位用户充值500元到支付宝的话，那么可以100%中奖100元红包，</p><p>充值200元到支付宝的话，那么可以100%中奖20元的红包，当然如果不充值的话，也可以抽奖，但是概率非常低，基本上是抽不到的，当然也有可能抽到的。</p><p>我们下面可以分析下代码中的几个字段值需要来判断：</p><ol><li><p>orderType(充值类型)，如果值为1的话，说明是充值500元的用户，如果为2的话，说明是充值200元的用户，如果是3的话，说明是没有充值的用户。</p></li><li><p>isPay(是否已经成功充值了): 如果该值为true的话，说明已经成功充值了，否则的话 说明没有充值成功；就当作普通用户来购买。</p></li><li><p>count(表示数量)；普通用户抽奖，如果数量有的话，就可以拿到优惠卷，否则的话，不能拿到优惠卷。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 我们一般写代码如下处理操作</span>var order <span class="token operator">=</span>  <span class="token function">function</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用户充值500元到支付宝去</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果充值成功的话，100%中奖</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了100元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 充值失败，就当作普通用户来处理中奖信息</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您已抽到10元优惠卷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，请再接再厉哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用户充值200元到支付宝去</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 如果充值成功的话，100%中奖</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了20元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 充值失败，就当作普通用户来处理中奖信息</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您已抽到10元优惠卷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，请再接再厉哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 普通用户来处理中奖信息</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您已抽到10元优惠卷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，请再接再厉哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码虽然可以实现需求，但是代码不容易扩展且难以阅读，假如以后我想一两个条件，我想充值300元成功的话，可以中奖150元红包，那么这时候又要改动里面的代码,这样业务逻辑与代码耦合性相对比较高，一不小心就改错了代码；这时候我们试着使用职责链模式来依次传递对象来实现；</p></li></ol><p>如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">order500</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了100元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自己不处理，传递给下一个对象order200去处理</span>        <span class="token function">order200</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">order200</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了20元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自己不处理，传递给下一个对象普通用户去处理</span>        <span class="token function">orderNormal</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">orderNormal</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 普通用户来处理中奖信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您已抽到10元优惠卷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，请再接再厉哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码我们分别使用了三个函数order500，order200，orderNormal来分别处理自己的业务逻辑，如果目前的自己函数不能处理的事情，我们传递给下面的函数去处理，依次类推，直到有一个函数能处理他，否则的话，该职责链模式直接从链中离开，告诉不能处理，抛出错误提示，上面的代码虽然可以当作职责链模式，但是我们看上面的代码可以看到order500函数内依赖了order200这样的函数，这样就必须有这个函数，也违反了面向对象中的 开放-封闭原则。下面我们继续来理解编写 灵活可拆分的职责链节点。</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">order500</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了100元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//我不知道下一个节点是谁,反正把请求往后面传递</span>        <span class="token keyword">return</span> <span class="token string">"nextSuccessor"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">order200</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> isPay <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您中奖了20元红包了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//我不知道下一个节点是谁,反正把请求往后面传递</span>        <span class="token keyword">return</span> <span class="token string">"nextSuccessor"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">orderNormal</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span>isPay<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 普通用户来处理中奖信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，您已抽到10元优惠卷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"亲爱的用户，请再接再厉哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 下面需要编写职责链模式的封装构造函数方法</span>var Chain <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setNextSuccessor <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>successor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把请求往下传递</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>passRequest <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span>passRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//现在我们把3个函数分别包装成职责链节点：</span>var chainOrder500 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>order500<span class="token punctuation">)</span><span class="token punctuation">;</span>var chainOrder200 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>order200<span class="token punctuation">)</span><span class="token punctuation">;</span>var chainOrderNormal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>orderNormal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后指定节点在职责链中的顺序</span>chainOrder500<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainOrder200<span class="token punctuation">)</span><span class="token punctuation">;</span>chainOrder200<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainOrderNormal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后把请求传递给第一个节点：</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 亲爱的用户，您中奖了100元红包了</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 亲爱的用户，您中奖了20元红包了</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 亲爱的用户，您已抽到10元优惠卷 </span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 亲爱的用户，请再接再厉哦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码;分别编写order500，order200，orderNormal三个函数，在函数内分别处理自己的业务逻辑，如果自己的函数不能处理的话，就返回字符串nextSuccessor 往后面传递，然后封装Chain这个构造函数，传递一个fn这个对象实列进来，且有自己的一个属性successor，原型上有2个方法 setNextSuccessor 和 passRequest;setNextSuccessor 这个方法是指定节点在职责链中的顺序的，把相对应的方法保存到this.successor这个属性上，chainOrder500.setNextSuccessor(chainOrder200);chainOrder200.setNextSuccessor(chainOrderNormal);指定链中的顺序，因此this.successor引用了order200这个方法和orderNormal这个方法，因此第一次chainOrder500.passRequest(1,true,500)调用的话，调用order500这个方法，直接输出，第二次调用chainOrder500.passRequest(2,true,500);这个方法从链中首节点order500开始不符合，就返回successor字符串，然后this.successor &amp;&amp; this.successor.passRequest.apply(this.successor,arguments);就执行这句代码；上面我们说过this.successor这个属性引用了2个方法 分别为order200和orderNormal，因此调用order200该方法，所以就返回了值，依次类推都是这个原理。那如果以后我们想充值300元的红包的话，我们可以编写order300这个函数，然后实列一下链chain包装起来，指定一下职责链中的顺序即可，里面的业务逻辑不需要做任何处理;</p><p>理解异步的职责链</p><p>上面的只是同步职责链，我们让每个节点函数同步返回一个特定的值”nextSuccessor”，来表示是否把请求传递给下一个节点，在我们开发中会经常碰到ajax异步请求，请求成功后，需要做某某事情，那么这时候如果我们再套用上面的同步请求的话，就不生效了，下面我们来理解下使用异步的职责链来解决这个问题;我们给Chain类再增加一个原型方法Chain.prototype.next，表示手动传递请求给职责链中的一下个节点。</p><p>如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">Fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"nextSuccessor"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">Fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        self<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">Fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 下面需要编写职责链模式的封装构造函数方法</span>var Chain <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setNextSuccessor <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>successor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把请求往下传递</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>passRequest <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span>passRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span>passRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//现在我们把3个函数分别包装成职责链节点：</span>var chainFn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>Fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>var chainFn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>Fn2<span class="token punctuation">)</span><span class="token punctuation">;</span>var chainFn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Chain</span><span class="token punctuation">(</span>Fn3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后指定节点在职责链中的顺序</span>chainFn1<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainFn2<span class="token punctuation">)</span><span class="token punctuation">;</span>chainFn2<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainFn3<span class="token punctuation">)</span><span class="token punctuation">;</span>chainFn1<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印出1，2 过1秒后 会打印出3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用函数 chainFn1.passRequest();后，会先执行发送者Fn1这个函数 打印出1，然后返回字符串 nextSuccessor;</p><p> 接着就执行return this.successor &amp;&amp; this.successor.passRequest.apply(this.successor,arguments);这个函数到Fn2，打印2，接着里面有一个setTimeout定时器异步函数，需要把请求给职责链中的下一个节点，因此过一秒后会打印出3;</p><p>职责链模式的优点是：</p><ol><li><p>解耦了请求发送者和N个接收者之间的复杂关系，不需要知道链中那个节点能处理你的请求，所以你</p><p>只需要把请求传递到第一个节点即可。</p></li><li><p>链中的节点对象可以灵活地拆分重组，增加或删除一个节点，或者改变节点的位置都是很简单的事情。</p></li><li><p>我们还可以手动指定节点的起始位置，并不是说非得要从其实节点开始传递的.</p><p>缺点：职责链模式中多了一点节点对象，可能在某一次请求过程中，大部分节点没有起到实质性作用，他们的作用只是让</p><p>请求传递下去，从性能方面考虑，避免过长的职责链提高性能。</p><h5 id="六-命令模式的理解"><a href="#六-命令模式的理解" class="headerlink" title="六.命令模式的理解"></a>六.命令模式的理解</h5><p>命令模式中的命令指的是一个执行某些特定事情的指令。</p><p>命令模式使用的场景有：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道请求的操作是什么，此时希望用一种松耦合的方式来设计程序代码;使得请求发送者和请求接受者消除彼此代码中的耦合关系。</p></li></ol><p>我们先来列举生活中的一个列子来说明下命令模式：比如我们经常会在天猫上购买东西，然后下订单，下单后我就想收到货，并且希望货物是真的，对于用户来讲它并关心下单后卖家怎么发货，当然卖家发货也有时间的，比如24小时内发货等，用户更不关心快递是给谁派送，当然有的人会关心是什么快递送货的; 对于用户来说，只要在规定的时间内发货，且一般能在相当的时间内收到货就可以，当然命令模式也有撤销命令和重做命令，比如我们下单后，我突然不想买了，我在发货之前可以取消订单，也可以重新下单（也就是重做命令）;比如我的衣服尺码拍错了，我取消该订单，重新拍一个大码的。</p><ol><li><p>命令模式的列子</p><p>记得我以前刚做前端的那会儿，也就是刚毕业进的第一家公司，进的是做外包项目的公司，该公司一般外包淘宝活动页面及腾讯的游戏页面，我们那会儿应该叫切页面的前端，负责做一些html和css的工作，所以那会儿做腾讯的游戏页面，经常会帮他们做静态页面，比如在页面放几个按钮，我们只是按照设计稿帮腾讯游戏哪方面的把样式弄好，比如说页面上的按钮等事情，比如说具体说明的按钮要怎么操作，点击按钮后会发生什么事情，我们并不知道，我们不知道他们的业务是什么，当然我们知道的肯定会有点击事件，具体要处理什么业务我们并不知道，这里我们就可以使用命令模式来处理了：点击按钮之后，必须向某些负责具体行为的对象发送请求，这些对象就是请求的接收者。但是目前我们并不知道接收者是什么对象，也不知道接受者究竟会做什么事情，这时候我们可以使用命令模式来消除发送者与接收者的代码耦合关系。</p></li></ol><p>我们先使用传统的面向对象模式来设计代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"button1"</span><span class="token operator">></span>刷新菜单目录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"button2"</span><span class="token operator">></span>增加子菜单<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"button3"</span><span class="token operator">></span>删除子菜单<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JS代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var b1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     b2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     b3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义setCommand 函数，该函数负责往按钮上面安装命令。点击按钮后会执行command对象的execute()方法。</span> var setCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">{</span>    button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下面我们自己来定义各个对象来完成自己的业务操作</span> var MenuBar <span class="token operator">=</span> <span class="token punctuation">{</span>    refersh<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"刷新菜单目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> var SubMenu <span class="token operator">=</span> <span class="token punctuation">{</span>    add<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"增加子菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    del<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"删除子菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下面是编写命令类</span> var RefreshMenuBarCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> RefreshMenuBarCommand<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>execute <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">refersh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 增加命令操作</span> var AddSubMenuCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> AddSubMenuCommand<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>execute <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 删除命令操作</span> var DelSubMenuCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> DelSubMenuCommand<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>execute <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 最后把命令接收者传入到command对象中，并且把command对象安装到button上面</span> var refershBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RefreshMenuBarCommand</span><span class="token punctuation">(</span>MenuBar<span class="token punctuation">)</span><span class="token punctuation">;</span> var addBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AddSubMenuCommand</span><span class="token punctuation">(</span>SubMenu<span class="token punctuation">)</span><span class="token punctuation">;</span> var delBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DelSubMenuCommand</span><span class="token punctuation">(</span>SubMenu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>refershBtn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span>addBtn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>b3<span class="token punctuation">,</span>delBtn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的命令类代码我们可以看到，任何一个操作都有一个execute这个方法来执行操作;上面的代码是使用传统的面向对象编程来实现命令模式的，命令模式过程式的请求调用封装在command对象的execute方法里。我们有没有发现上面的编写代码有点繁琐呢，我们可以使用javascript中的回调函数来做这些事情的，在面向对象中，命令模式的接收者被当成command对象的属性保存起来，同时约定执行命令的操作调用command.execute方法，但是如果我们使用回调函数的话，那么接收者被封闭在回调函数产生的环境中，执行操作将会更加简单，仅仅执行回调函数即可，下面我们来看看代码如下：</p><p>代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var setCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>    button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  var MenuBar <span class="token operator">=</span> <span class="token punctuation">{</span>    refersh<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"刷新菜单界面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> var SubMenu <span class="token operator">=</span> <span class="token punctuation">{</span>    add<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"增加菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刷新菜单</span> var RefreshMenuBarCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">refersh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加菜单</span> var AddSubMenuCommand <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> var refershMenuBarCommand <span class="token operator">=</span> <span class="token function">RefreshMenuBarCommand</span><span class="token punctuation">(</span>MenuBar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加菜单</span> var addSubMenuCommand <span class="token operator">=</span> <span class="token function">AddSubMenuCommand</span><span class="token punctuation">(</span>SubMenu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>refershMenuBarCommand<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span>addSubMenuCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以如下使用javascript回调函数如下编码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 如下代码上的四个按钮 点击事件</span>var b1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    b2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    b3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    b4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* bindEnv函数负责往按钮上面安装点击命令。点击按钮后，会调用 函数 */</span>var bindEnv <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>    button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 现在我们来编写具体处理业务逻辑代码</span>var Todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>    test1<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是来做第一个测试的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实现业务中的增删改操作</span>var Menu <span class="token operator">=</span> <span class="token punctuation">{</span>    add<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是来处理一些增加操作的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    del<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是来处理一些删除操作的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    update<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是来处理一些更新操作的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">bindEnv</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span>Todo1<span class="token punctuation">.</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增加按钮</span><span class="token function">bindEnv</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span>Menu<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除按钮</span><span class="token function">bindEnv</span><span class="token punctuation">(</span>b3<span class="token punctuation">,</span>Menu<span class="token punctuation">.</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更改按钮</span><span class="token function">bindEnv</span><span class="token punctuation">(</span>b4<span class="token punctuation">,</span>Menu<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>理解宏命令：</p><p>宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。</p></li></ol><p>其实类似把页面的所有函数方法放在一个数组里面去，然后遍历这个数组，依次</p><p>执行该方法的。</p><p>代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var command1 <span class="token operator">=</span> <span class="token punctuation">{</span>    execute<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> var command2 <span class="token operator">=</span> <span class="token punctuation">{</span>    execute<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var command3 <span class="token operator">=</span> <span class="token punctuation">{</span>    execute<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义宏命令，command.add方法把子命令添加进宏命令对象，</span><span class="token comment" spellcheck="true">// 当调用宏命令对象的execute方法时，会迭代这一组命令对象，</span><span class="token comment" spellcheck="true">// 并且依次执行他们的execute方法。</span>var command <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        commandsList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        add<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>commandsList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        execute<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>commands <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commandsList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commands<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>commandsList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化宏命令</span>var c <span class="token operator">=</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>command1<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>command2<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>command3<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="七-模板方方法模式"><a href="#七-模板方方法模式" class="headerlink" title="七.模板方方法模式"></a>七.模板方方法模式</h5><p>  模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。</p><p>比如说我们要实现一个JS功能，比如表单验证等js，那么如果我们没有使用上一章讲的使用javascript中的策略模式来解决表单验证封装代码，而是自己写的临时表单验证功能，肯定是没有进行任何封装的，那么这个时候我们是针对两个值是否相等给用户弹出一个提示，如果再另外一个页面也有一个表单验证，他们判断的方式及业务逻辑基本相同的，只是比较的参数不同而已，我们是不是又要考虑写一个表单验证代码呢？那么现在我们可以考虑使用模板方法模式来解决这个问题；公用的方法提取出来，不同的方法由具体的子类是实现。这样设计代码也可扩展性更强，代码更优等优点~</p><p>我们不急着写代码，我们可以先来看一个列子，比如最近经常在qq群里面有很多前端招聘的信息，自己也接到很多公司或者猎头问我是否需要找工作等电话，当然我现在是没有打算找工作的，因为现在有更多的业余时间可以处理自己的事情，所以也觉得蛮不错的~ 我们先来看看招聘中面试这个流程；面试流程对于很多大型公司，比如BAT，面试过程其实很类似；因此我们可以总结面试过程中如下：</p><ol><li><p>笔试：(不同的公司有不同的笔试题目)。</p></li><li><p>技术面试(一般情况下分为二轮)：第一轮面试你的有可能是你未来直接主管或者未来同事问你前端的一些专业方面的技能及以前做过的项目，在项目中遇到哪些问题及当时是如何解决问题的，还有根据你的简历上的基本信息来交流的，比如说你简历说精通JS，那么人家肯定得问哦~ 第二轮面试一般都是公司的牛人或者架构师来问的，比如问你计算机基本原理，或者问一些数据结构与算法等信息；第二轮面试可能会更深入的去了解你这个人的技术。</p></li><li><p>HR和总监或者总经理面试；那么这一轮的话，HR可能会问下你一些个人基本信息等情况，及问下你今后有什么打算的个人规划什么的，总监或者总经理可能会问下你对他们的网站及产品有了解过没有？及现在他们的产品有什么问题，有没有更好的建议或者如何改善的地方等信息；</p></li><li><p>最后就是HR和你谈薪资及一般几个工作日可以得到通知，拿到offer(当然不符合的肯定是没有通知的哦)；及自己有没有需要了解公司的情况等等信息；</p></li></ol><p>一般的面试过程都是如上四点下来的，对于不同的公司都差不多的流程的，当然有些公司可能没有上面的详细流程的，我这边这边讲一般的情况下，好了，这边就不扯了，这边也不是讲如何面试的哦，这边只是通过这个列子让我们更加的理解javascript中模板方法模式；所以我们现在回到正题上来；</p><p>我们先来分析下上面的流程；我们可以总结如下：</p><p>首先我们看一下百度的面试；因此我们可以先定义一个构造函数。</p><p>var BaiDuInterview = function(){};</p><p>那么下面就有百度面试的流程哦~</p><ol><li>笔试</li></ol><p>那么我们可以封装一个笔试的方法，代码如下：</p><p>// baidu 笔试</p><p>BaiDuInterview.prototype.writtenTest = function(){</p><pre><code>console.log(&quot;我终于看到百度的笔试题了~&quot;);</code></pre><p>};</p><ol start="2"><li>技术面试：</li></ol><p>// 技术面试</p><p>BaiDuInterview.prototype.technicalInterview = function(){</p><pre><code>console.log(&quot;我是百度的技术负责人&quot;);</code></pre><p>}; </p><ol start="3"><li><p>HR和总监或者总经理面试，我们可以称之为leader面试；代码如下：</p><p>// 领导面试</p></li></ol><p>BaiDuInterview.prototype.leader = function(){</p><pre><code>console.log(&quot;百度leader来面试了&quot;);</code></pre><p>};</p><ol start="4"><li>和HR谈期望的薪资待遇及HR会告诉你什么时候会有通知，因此我们这边可以称之为这个方法为 是否拿到offer(当然不符合要求肯定是没有通知的哦)；</li></ol><p>// 等通知</p><p>BaiDuInterview.prototype.waitNotice = function(){</p><pre><code>console.log(&quot;百度的人力资源太不给力了，到现在都不给我通知&quot;);</code></pre><p>};</p><p>如上看到代码的基本结构，但是我们还需要一个初始化方法；代码如下：</p><p>// 代码初始化</p><p>BaiDuInterview.prototype.init = function(){</p><pre><code>this.writtenTest();this.technicalInterview();this.leader();this.waitNotice();</code></pre><p>};</p><p>var baiDuInterview = new BaiDuInterview();</p><p>baiDuInterview.init();</p><p>综合所述：所有的代码如下：</p><p>var BaiDuInterview = function(){};</p><p>// baidu 笔试</p><p>BaiDuInterview.prototype.writtenTest = function(){</p><pre><code>console.log(&quot;我终于看到百度的题目笔试题了~&quot;);</code></pre><p>};</p><p>// 技术面试</p><p>BaiDuInterview.prototype.technicalInterview = function(){</p><pre><code>console.log(&quot;我是百度的技术负责人&quot;);</code></pre><p>}; </p><p>// 领导面试</p><p>BaiDuInterview.prototype.leader = function(){</p><pre><code>console.log(&quot;百度leader来面试了&quot;);</code></pre><p>};</p><p>// 等通知</p><p>BaiDuInterview.prototype.waitNotice = function(){</p><pre><code>console.log(&quot;百度的人力资源太不给力了，到现在都不给我通知&quot;);</code></pre><p>};</p><p>// 代码初始化</p><p>BaiDuInterview.prototype.init = function(){</p><pre><code>this.writtenTest();this.technicalInterview();this.leader();this.waitNotice();</code></pre><p>};</p><p>var baiDuInterview = new BaiDuInterview();</p><p>baiDuInterview.init();</p><p>上面我们可以看到百度面试的基本流程如上面的代码，那么阿里和腾讯的也和上面的代码类似(这里就不一一贴一样的代码哦)，因此我们可以把公用代码提取出来；我们首先定义一个类，叫面试Interview</p><p>那么代码改成如下：</p><p>var Interview = function(){};</p><ol><li>笔试：</li></ol><p>我不管你是百度的笔试还是阿里或者腾讯的笔试题，我这边统称为笔试(WrittenTest)，那么你们公司有不同的笔试题，都交给子类去具体实现，父类方法不管具体如何实现，笔试题具体是什么样的 我都不管。代码变为如下：</p><p>// 笔试</p><p>Interview.prototype.writtenTest = function(){</p><pre><code>console.log(&quot;我终于看到笔试题了~&quot;);</code></pre><p>};</p><ol start="2"><li>技术面试，技术面试原理也一样，这里就不多说，直接贴代码：</li></ol><p>// 技术面试</p><p>Interview.prototype.technicalInterview = function(){</p><pre><code>console.log(&quot;我是技术负责人负责技术面试&quot;);</code></pre><p>}; </p><ol start="3"><li>领导面试</li></ol><p>// 领导面试</p><p>Interview.prototype.leader = function(){</p><pre><code>console.log(&quot;leader来面试了&quot;);</code></pre><p>};</p><ol start="4"><li>等通知</li></ol><p>// 等通知</p><p>Interview.prototype.waitNotice = function(){</p><pre><code>console.log(&quot;人力资源太不给力了，到现在都不给我通知&quot;);</code></pre><p>};</p><p>代码初始化方法如下：</p><p>// 代码初始化</p><p>Interview.prototype.init = function(){</p><pre><code>this.writtenTest();this.technicalInterview();this.leader();this.waitNotice();</code></pre><p>};</p><p>二：创建子类</p><p>现在我们来创建一个百度的子类来继承上面的父类；代码如下：</p><p>var BaiDuInterview = function(){};</p><p>BaiDuInterview.prototype = new Interview();</p><p>现在我们可以在子类BaiDuInterview 重写父类Interview中的方法；代码如下：</p><p>// 子类重写方法 实现自己的业务逻辑</p><p>BaiDuInterview.prototype.writtenTest = function(){</p><pre><code>console.log(&quot;我终于看到百度的笔试题了&quot;);</code></pre><p>}</p><p>BaiDuInterview.prototype.technicalInterview = function(){</p><pre><code>console.log(&quot;我是百度的技术负责人，想面试找我&quot;);</code></pre><p>}</p><p>BaiDuInterview.prototype.leader = function(){</p><pre><code>console.log(&quot;我是百度的leader，不想加班的或者业绩提不上去的给我滚蛋&quot;);</code></pre><p>}</p><p>BaiDuInterview.prototype.waitNotice = function(){</p><pre><code>console.log(&quot;百度的人力资源太不给力了，我等的花儿都谢了！！&quot;);</code></pre><p>}</p><p>var baiDuInterview = new BaiDuInterview();</p><p>baiDuInterview.init();</p><p>如上看到，我们直接调用子类baiDuInterview.init()方法，由于我们子类baiDuInterview没有init方法，但是它继承了父类，所以会到父类中查找对应的init方法；所以会迎着原型链到父类中查找；对于其他子类，比如阿里类代码也是一样的，这里就不多介绍了，对于父类这个方法 Interview.prototype.init() 是模板方法，因为他封装了子类中算法框架，它作为一个算法的模板，指导子类以什么样的顺序去执行代码。</p><p>三： Javascript中的模板模式使用场景</p><p>虽然在java中也有子类实现父类的接口，但是我认为javascript中可以和java中不同的，java中可能父类就是一个空的类，子类去实现这个父类的接口，在javascript中我认为完全把公用的代码写在父函数内，如果将来业务逻辑需要更改的话，或者说添加新的业务逻辑，我们完全可以使用子类去重写这个父类，这样的话代码可扩展性强，更容易维护。由于本人不是专业java的，所以描述java中的知识点有误的话，请理解~~</p><h5 id="八-理解javascript中的策略模式"><a href="#八-理解javascript中的策略模式" class="headerlink" title="八.理解javascript中的策略模式"></a>八.理解javascript中的策略模式</h5><ol><li>理解javascript中的策略模式</li></ol><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p><p>使用策略模式的优点如下：</p><p>优点：1. 策略模式利用组合，委托等技术和思想，有效的避免很多if条件语句。</p><pre><code>  2. 策略模式提供了开放-封闭原则，使代码更容易理解和扩展。  3. 策略模式中的代码可以复用。</code></pre><p>一：使用策略模式计算奖金；</p><p>下面的demo是我在书上看到的，但是没有关系，我们只是来理解下策略模式的使用而已，我们可以使用策略模式来计算奖金问题；</p><p>比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；现在我们使用一般的编码方式会如下这样编写代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var calculateBouns <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用如下：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个参数为薪资，第二个参数为等级；</p><p>代码缺点如下：</p><p>calculateBouns 函数包含了很多if-else语句。</p><p>calculateBouns 函数缺乏弹性，假如还有D等级的话，那么我们需要在calculateBouns 函数内添加判断等级D的if语句；</p><p>算法复用性差，如果在其他的地方也有类似这样的算法的话，但是规则不一样，我们这些代码不能通用。</p><ol start="2"><li>使用组合函数重构代码</li></ol><p>组合函数是把各种算法封装到一个个的小函数里面，比如等级A的话，封装一个小函数，等级为B的话，也封装一个小函数，以此类推；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var performanceA <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var performanceB <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var performanceC <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var calculateBouns <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">performanceA</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">performanceB</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">performanceC</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用如下</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码看起来有点改善，但是还是有如下缺点：</p><p>calculateBouns 函数有可能会越来越大，比如增加D等级的时候，而且缺乏弹性。</p><ol start="3"><li>使用策略模式重构代码</li></ol><p>策略模式指的是 定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，实际就是将算法的使用和实现分离出来；算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数，而算法的实现是根据绩效对应不同的绩效规则；</p><p>一个基于策略模式的程序至少由2部分组成，第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类。我们先使用传统面向对象来实现；</p><p>如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var performanceA <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>performanceA<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>calculate <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      var performanceB <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>performanceB<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>calculate <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var performanceC <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>performanceC<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>calculate <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 奖金类</span>var Bouns <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 原始工资</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>levelObj <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 绩效等级对应的策略对象</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Bouns<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setSalary <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存员工的原始工资</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Bouns<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setlevelObj <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>levelObj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>levelObj <span class="token operator">=</span> levelObj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置员工绩效等级对应的策略对象</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取得奖金数</span>Bouns<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getBouns <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把计算奖金的操作委托给对应的策略对象</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>levelObj<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var bouns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Bouns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bouns<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bouns<span class="token punctuation">.</span><span class="token function">setlevelObj</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">performanceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置策略对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bouns<span class="token punctuation">.</span><span class="token function">getBouns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 40000</span>bouns<span class="token punctuation">.</span><span class="token function">setlevelObj</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">performanceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置策略对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bouns<span class="token punctuation">.</span><span class="token function">getBouns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 30000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码使用策略模式重构代码，可以看到代码职责更新分明，代码变得更加清晰。</p><ol start="4"><li>Javascript版本的策略模式<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//代码如下：</span>var obj <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">"A"</span><span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token string">"B"</span> <span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token string">"C"</span> <span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>var calculateBouns <span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> obj<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 40000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>可以看到代码更加简单明了；</li></ol><p>策略模式指的是定义一系列的算法，并且把它们封装起来，但是策略模式不仅仅只封装算法，我们还可以对用来封装一系列的业务规则，只要这些业务规则目标一致，我们就可以使用策略模式来封装它们；</p><p>表单效验</p><p>比如我们经常来进行表单验证，比如注册登录对话框，我们登录之前要进行验证操作：比如有以下几条逻辑：</p><p>用户名不能为空</p><p>密码长度不能小于6位。</p><p>手机号码必须符合格式。</p><p>比如HTML代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span> id<span class="token operator">=</span><span class="token string">"registerForm"</span> method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>label<span class="token operator">></span>请输入用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"userName"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>label<span class="token operator">></span>请输入密码：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>label<span class="token operator">></span>请输入手机号码：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"phoneNumber"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们正常的编写表单验证代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"registerForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registerForm<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">.</span>value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码的长度不能小于6位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>phoneNumber<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"手机号码格式不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样编写代码有如下缺点：</p><p>1.registerForm.onsubmit 函数比较大，代码中包含了很多if语句；</p><p>2.registerForm.onsubmit 函数缺乏弹性，如果增加了一种新的效验规则，或者想把密码的长度效验从6改成8，我们必须改registerForm.onsubmit 函数内部的代码。违反了开放-封闭原则。</p><ol start="3"><li>算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的效验，那么我们可能又需要复制代码了；</li></ol><p>下面我们可以使用策略模式来重构表单效验；</p><p>第一步我们先来封装策略对象；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var strategy <span class="token operator">=</span> <span class="token punctuation">{</span>    isNotEmpty<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 限制最小长度</span>    minLength<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>length<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 手机号码格式</span>    mobileFormat<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们准备实现Validator类，Validator类在这里作为Context，负责接收用户的请求并委托给strategy 对象，如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var Validator <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存效验规则</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>rule<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var str <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// str 返回的是 minLength:6 </span>        var strategy <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把input的value添加进参数列表</span>        str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把errorMsg添加进参数列表</span>        <span class="token keyword">return</span> strategys<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span> validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        var msg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开始效验 并取得效验后的返回信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Validator类在这里作为Context，负责接收用户的请求并委托给strategys对象。上面的代码中，我们先创建一个Validator对象，然后通过validator.add方法往validator对象中添加一些效验规则，validator.add方法接收3个参数，如下代码：</p><p>validator.add(registerForm.password,’minLength:6’,’密码长度不能小于6位’);</p><p>registerForm.password 为效验的input输入框dom节点；</p><p>minLength:6： 是以一个冒号隔开的字符串，冒号前面的minLength代表客户挑选的strategys对象，冒号后面的数字6表示在效验过程中所必须验证的参数，minLength:6的意思是效验 registerForm.password 这个文本输入框的value最小长度为6位；如果字符串中不包含冒号，说明效验过程中不需要额外的效验信息；</p><p>第三个参数是当效验未通过时返回的错误信息；</p><p>当我们往validator对象里添加完一系列的效验规则之后，会调用validator.start()方法来启动效验。如果validator.start()返回了一个errorMsg字符串作为返回值，说明该次效验没有通过，此时需要registerForm.onsubmit方法返回false来阻止表单提交。下面我们来看看初始化代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var validateFunc <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个Validator对象</span>    <span class="token comment" spellcheck="true">/* 添加一些效验规则 */</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span><span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span><span class="token string">'minLength:6'</span><span class="token punctuation">,</span><span class="token string">'密码长度不能小于6位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span><span class="token string">'mobileFormat'</span><span class="token punctuation">,</span><span class="token string">'手机号码格式不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得效验结果</span>    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回效验结果</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"registerForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registerForm<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var errorMsg <span class="token operator">=</span> <span class="token function">validateFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是所有的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var strategys <span class="token operator">=</span> <span class="token punctuation">{</span>    isNotEmpty<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 限制最小长度</span>    minLength<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>length<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 手机号码格式</span>    mobileFormat<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>var Validator <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存效验规则</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>rule<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var str <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// str 返回的是 minLength:6 </span>        var strategy <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把input的value添加进参数列表</span>        str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把errorMsg添加进参数列表</span>        <span class="token keyword">return</span> strategys<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span> validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        var msg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开始效验 并取得效验后的返回信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var validateFunc <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个Validator对象</span>    <span class="token comment" spellcheck="true">/* 添加一些效验规则 */</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span><span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span><span class="token string">'minLength:6'</span><span class="token punctuation">,</span><span class="token string">'密码长度不能小于6位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span><span class="token string">'mobileFormat'</span><span class="token punctuation">,</span><span class="token string">'手机号码格式不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得效验结果</span>    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回效验结果</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"registerForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registerForm<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var errorMsg <span class="token operator">=</span> <span class="token function">validateFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上使用策略模式来编写表单验证代码可以看到好处了，我们通过add配置的方式就完成了一个表单的效验；这样的话，那么代码可以当做一个组件来使用，并且可以随时调用，在修改表单验证规则的时候，也非常方便，通过传递参数即可调用；</p><p>给某个文本输入框添加多种效验规则，上面的代码我们可以看到，我们只是给输入框只能对应一种效验规则，比如上面的我们只能效验输入框是否为空，validator.add(registerForm.userName,’isNotEmpty’,’用户名不能为空’);但是如果我们既要效验输入框是否为空，还要效验输入框的长度不要小于10位的话，那么我们期望需要像如下传递参数：</p><p>validator.add(registerForm.userName,[{strategy:’isNotEmpty’,errorMsg:’用户名不能为空’}，{strategy: ‘minLength:6’,errorMsg:’用户名长度不能小于6位’}])</p><p>我们可以编写代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 策略对象</span>var strategys <span class="token operator">=</span> <span class="token punctuation">{</span>    isNotEmpty<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 限制最小长度</span>    minLength<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>length<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 手机号码格式</span>    mobileFormat<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>var Validator <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存效验规则</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rule<span class="token punctuation">;</span> rule <span class="token operator">=</span> rules<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">{</span>            var strategyAry <span class="token operator">=</span> rule<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var errorMsg <span class="token operator">=</span> rule<span class="token punctuation">.</span>errorMsg<span class="token punctuation">;</span>            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                var strategy <span class="token operator">=</span> strategyAry<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                strategyAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                strategyAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> strategys<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>strategyAry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Validator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span> validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    var msg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开始效验 并取得效验后的返回信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代码调用</span>var registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"registerForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var validateFunc <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个Validator对象</span>    <span class="token comment" spellcheck="true">/* 添加一些效验规则 */</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>strategy<span class="token operator">:</span> <span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span>errorMsg<span class="token operator">:</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>strategy<span class="token operator">:</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span>errorMsg<span class="token operator">:</span><span class="token string">'用户名长度不能小于6位'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>strategy<span class="token operator">:</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span>errorMsg<span class="token operator">:</span><span class="token string">'密码长度不能小于6位'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>phoneNumber<span class="token punctuation">,</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>strategy<span class="token operator">:</span> <span class="token string">'mobileFormat'</span><span class="token punctuation">,</span>errorMsg<span class="token operator">:</span><span class="token string">'手机号格式不正确'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得效验结果</span>    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回效验结果</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 点击确定提交</span>registerForm<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var errorMsg <span class="token operator">=</span> <span class="token function">validateFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如上代码都是按照书上来做的，都是看到书的代码，最主要我们理解策略模式实现，比如上面的表单验证功能是这样封装的代码，我们平时使用jquery插件表单验证代码原来是这样封装的，为此我们以后也可以使用这种方式来封装表单等学习；</p><h5 id="九-javascript中理解发布–订阅模式"><a href="#九-javascript中理解发布–订阅模式" class="headerlink" title="九.javascript中理解发布–订阅模式"></a>九.javascript中理解发布–订阅模式</h5><ol><li><p>发布订阅模式介绍</p><p>发布—订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p><p>现实生活中的发布-订阅模式；</p></li></ol><p>比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们；</p><p>在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息；</p><p>发布订阅模式的优点：</p><ol><li>支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。</li></ol><p>比如上面的列子，小明，小红不需要天天逛淘宝网看鞋子到了没有，在合适的时间点，发布者(卖家)来货了的时候，会通知该订阅者(小红，小明等人)。</p><ol start="2"><li><p>发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；同理卖家（发布者）它只需要将鞋子来货的这件事告诉订阅者(买家)，他不管买家到底买还是不买，还是买其他卖家的。只要鞋子到货了就通知订阅者即可。</p><p>对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~</p></li></ol><p>发布订阅模式的缺点：</p><p>  创建订阅者需要消耗一定的时间和内存。</p><p>  虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。</p><ol start="2"><li><p>如何实现发布–订阅模式？</p><ol><li><p>首先要想好谁是发布者(比如上面的卖家)。</p></li><li><p>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。</p></li><li><p>最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</p></li></ol></li></ol><p>我们还可以在回调函数里面添加一点参数，比如鞋子的颜色，鞋子尺码等信息；</p><p>我们先来实现下简单的发布-订阅模式；代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var shoeObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义发布者</span>shoeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓存列表 存放订阅者回调函数</span><span class="token comment" spellcheck="true">// 增加订阅者</span>shoeObj<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    shoeObj<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 订阅消息添加到缓存列表</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 发布消息</span>shoeObj<span class="token punctuation">.</span>trigger <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小红订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"颜色是："</span><span class="token operator">+</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小花订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印颜色是："</span><span class="token operator">+</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：<br><img src="/medias/avatars/3.png" alt><br>打印如上截图，我们看到订阅者接收到发布者的每个消息，但是呢，对于小红来说，她只想接收颜色为红色的消息，不想接收颜色为黑色的消息，为此我们需要对代码进行如下改造下，我们可以先增加一个key，使订阅者只订阅自己感兴趣的消息。代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var shoeObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义发布者</span>shoeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓存列表 存放订阅者回调函数</span><span class="token comment" spellcheck="true">// 增加订阅者</span>shoeObj<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 订阅消息添加到缓存列表</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 发布消息</span>shoeObj<span class="token punctuation">.</span>trigger <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出消息类型名称</span>    var fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出该消息对应的回调函数的集合</span>    <span class="token comment" spellcheck="true">// 如果没有订阅过该消息的话，则返回</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arguments 是发布消息时附送的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小红订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小花订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'block'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"block"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，我们再来运行打印下 如下：<br><img src="/medias/avatars/4.png" alt><br>可以看到，订阅者只订阅自己感兴趣的消息了；</p><ol start="3"><li>发布—订阅模式的代码封装</li></ol><p>我们知道，对于上面的代码，小红去买鞋这么一个对象shoeObj 进行订阅，但是如果以后我们需要对买房子或者其他的对象进行订阅呢，我们需要复制上面的代码，再重新改下里面的对象代码；为此我们需要进行代码封装；</p><p>如下代码封装：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var event <span class="token operator">=</span> <span class="token punctuation">{</span>    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    listen<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 订阅的消息添加到缓存列表中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    trigger<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        var fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果没有订阅过该消息的话，则返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再定义一个initEvent函数，这个函数使所有的普通对象都具有发布订阅功能，如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var initEvent <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i in event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们再来测试下，我们还是给shoeObj这个对象添加发布-订阅功能；</span>var shoeObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">initEvent</span><span class="token punctuation">(</span>shoeObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小红订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小花订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'block'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"block"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>如何取消订阅事件？</li></ol><p>比如上面的列子，小红她突然不想买鞋子了，那么对于卖家的店铺他不想再接受该店铺的消息，那么小红可以取消该店铺的订阅。</p><p>如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">event<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    var fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果key对应的消息没有订阅过的话，则返回</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            var _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span><span class="token operator">=</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除订阅者的回调函数</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试代码如下：</span>var initEvent <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i in event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var shoeObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">initEvent</span><span class="token punctuation">(</span>shoeObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小红订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span>fn1 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小花订阅如下消息</span>shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span>fn2 <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span>fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：<br><img src="/medias/avatars/5.png" alt></p><ol start="5"><li>全局–发布订阅对象代码封装</li></ol><p>我们再来看看我们传统的ajax请求吧，比如我们传统的ajax请求，请求成功后需要做如下事情：</p><ol><li><p>渲染数据。</p></li><li><p>使用数据来做一个动画。</p></li></ol><p>那么我们以前肯定是如下写代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>“http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>index<span class="token punctuation">.</span>php”<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">rendedData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染数据</span>    <span class="token function">doAnimate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 实现动画 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如以后还需要做点事情的话，我们还需要在里面写调用的方法；这样代码就耦合性很高，那么我们现在使用发布-订阅模式来看如何重构上面的业务需求代码；</p><pre class="line-numbers language-cpp"><code class="language-cpp">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>“http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>index<span class="token punctuation">.</span>php”<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    Obj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>‘success’<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 发布请求成功后的消息</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；</span>Obj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>“success”<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">renderData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 订阅动画这个消息</span>Obj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>“success”<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">doAnimate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为此我们可以封装一个全局发布-订阅模式对象；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          listen<span class="token punctuation">,</span>          trigger<span class="token punctuation">,</span>          remove<span class="token punctuation">;</span>          listen <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        trigger <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            var key <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>                 fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        remove <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>            var fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                fns <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    var _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span><span class="token operator">=</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            listen<span class="token operator">:</span> listen<span class="token punctuation">,</span>            trigger<span class="token operator">:</span> trigger<span class="token punctuation">,</span>            remove<span class="token operator">:</span> remove        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试代码如下：</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码为:"</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印出尺码为42</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>理解模块间通信</li></ol><p>我们使用上面封装的全局的发布-订阅对象来实现两个模块之间的通信问题；比如现在有一个页面有一个按钮，每次点击此按钮后，div中会显示此按钮被点击的总次数；如下代码：</p><p><button id="count">点将我</button></p><div id="showcount"></div><p>我们中的a.js 负责处理点击操作 及发布消息；如下JS代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    var button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.js 负责监听add这个消息，并把点击的总次数显示到页面上来；如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showcount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是html代码如下，JS应用如下引用即可：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"global.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span>点将我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"showcount"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src <span class="token operator">=</span> <span class="token string">"a.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src <span class="token operator">=</span> <span class="token string">"b.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码，当点击一次按钮后，showcount的div会自动加1，如上演示的是2个模块之间如何使用发布-订阅模式之间的通信问题；</p><p>其中global.js 就是我们上面封装的全局-发布订阅模式对象的封装代码；</p><h5 id="十-理解中介者模式"><a href="#十-理解中介者模式" class="headerlink" title="十.理解中介者模式"></a>十.理解中介者模式</h5><p> 先来理解这么一个问题，假如我们前端开发接的需求是需求方给我们需求，可能一个前端开发会和多个需求方打交道，所以会保持多个需求方的联系，那么在程序里面就意味着保持多个对象的引用，当程序的规模越大，对象会越来越多，他们之间的关系会越来越复杂，那现在假如现在有一个中介者(假如就是我们的主管)来对接多个需求方的需求，那么需求方只需要把所有的需求给我们主管就可以，主管会依次看我们的工作量来给我们分配任务，这样的话，我们前端开发就不需要和多个业务方联系，我们只需要和我们主管(也就是中介)联系即可，这样的好处就弱化了对象之间的耦合。</p><p>日常生活中的列子：</p><pre><code>中介者模式对于我们日常生活中经常会碰到，比如我们去房屋中介去租房，房屋中介人在租房者和房东出租者之间形成一条中介;租房者并不关心租谁的房，房东出租者也并不关心它租给谁，因为有中介，所以需要中介来完成这场交易。</code></pre><p>中介者模式的作用是解除对象与对象之间的耦合关系，增加一个中介对象后，所有的相关对象都通过中介者对象来通信，而不是相互引用，所以当一个对象发送改变时，只需要通知中介者对象即可。中介者使各个对象之间耦合松散，而且可以独立地改变它们之间的交互。</p><p>实现中介者的列子如下：</p><p>不知道大家有没有玩过英雄杀这个游戏，最早的时候，英雄杀有2个人(分别是敌人和自己)；我们针对这个游戏先使用普通的函数来实现如下：</p><p>比如先定义一个函数，该函数有三个方法，分别是win(赢), lose(输)，和die(敌人死亡)这三个函数；只要一个玩家死亡该游戏就结束了，同时需要通知它的对手胜利了; 代码需要编写如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">Hero</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enemy <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>win <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'Won'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lose <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'lose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>die <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enemy<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化2个对象</span>var h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token string">"朱元璋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token string">"刘伯温"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给玩家设置敌人</span>h1<span class="token punctuation">.</span>enemy <span class="token operator">=</span> h2<span class="token punctuation">;</span>h2<span class="token punctuation">.</span>enemy <span class="token operator">=</span> h1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 朱元璋死了 也就输了</span>h1<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出 朱元璋lose 刘伯温Won</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们再来为游戏添加队友</p><p>比如现在我们来为游戏添加队友，比如英雄杀有6人一组，那么这种情况下就有队友，敌人也有3个；因此我们需要区分是敌人还是队友需要队的颜色这个字段，如果队的颜色相同的话，那么就是同一个队的，否则的话就是敌人；</p><p>我们可以先定义一个数组players来保存所有的玩家，在创建玩家之后，循环players来给每个玩家设置队友或者敌人;</p><p>var players = [];</p><p>接着我们再来编写Hero这个函数；代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个数组 保存所有的玩家</span>function <span class="token function">Hero</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存队友列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enemies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存敌人列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'live'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 玩家状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 角色名字</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>teamColor <span class="token operator">=</span> teamColor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队伍的颜色</span><span class="token punctuation">}</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>win <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 赢了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"win:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lose <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lose:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>die <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 所有队友死亡情况 默认都是活着的</span>    var all_dead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置玩家状态为死亡</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历，如果还有一个队友没有死亡的话，则游戏还未结束</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            all_dead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>all_dead<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队友全部死亡，游戏结束</span>        <span class="token comment" spellcheck="true">// 循环 通知所有的玩家 游戏失败</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>jlen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> jlen<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 通知所有敌人游戏胜利</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>jlen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enemies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> jlen<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>enemies<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个工厂类来创建玩家 </span>var heroFactory <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var newPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Hero</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ilen <span class="token operator">=</span> players<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是同一队的玩家</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>teamColor <span class="token operator">==</span><span class="token operator">=</span> newPlayer<span class="token punctuation">.</span>teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 相互添加队友列表</span>            players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>            newPlayer<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 相互添加到敌人列表</span>            players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>enemies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>            newPlayer<span class="token punctuation">.</span>enemies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    players<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newPlayer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 红队</span>var p1 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p2 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p3 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p4 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 蓝队</span>var p5 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"ee"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p6 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"ff"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p7 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"gg"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p8 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让红队玩家全部死亡</span>p1<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// lose:dd lose:aa lose:bb lose:cc</span><span class="token comment" spellcheck="true">// win:ee win:ff win:gg win:hh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码：Hero函数有2个参数，分别是name(玩家名字)和teamColor(队颜色)，</p><p>首先我们可以根据队颜色来判断是队友还是敌人；同样也有三个方法win(赢)，lose(输)，和die(死亡)；如果每次死亡一个人的时候，循环下该死亡的队友有没有全部死亡，如果全部死亡了的话，就输了，因此需要循环他们的队友，分别告诉每个队友中的成员他们输了，同时需要循环他们的敌人，分别告诉他们的敌人他们赢了；因此每次死了一个人的时候，都需要循环一次判断他的队友是否都死亡了；因此每个玩家和其他的玩家都是紧紧耦合在一起了。</p><p>下面我们可以使用中介者模式来改善上面的demo；</p><p>首先我们仍然定义Hero构造函数和Hero对象原型的方法，在Hero对象的这些原型方法中，不再负责具体的执行的逻辑，而是把操作转交给中介者对象，中介者对象来负责做具体的事情，我们可以把中介者对象命名为playerDirector;</p><p>在playerDirector开放一个对外暴露的接口ReceiveMessage，负责接收player对象发送的消息，而player对象发送消息的时候，总是把自身的this作为参数发送给playerDirector，以便playerDirector 识别消息来自于那个玩家对象。</p><p>代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">var players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个数组 保存所有的玩家</span>function <span class="token function">Hero</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'live'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 玩家状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 角色名字</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>teamColor <span class="token operator">=</span> teamColor<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队伍的颜色</span><span class="token punctuation">}</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>win <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 赢了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"win:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lose <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lose:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 死亡</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>die <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给中介者发送消息，玩家死亡</span>    playerDirector<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token string">'playerDead'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 移除玩家</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 给中介者发送一个消息，移除一个玩家</span>    playerDirector<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token string">'removePlayer'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 玩家换队</span>Hero<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>changeTeam <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 给中介者发送一个消息，玩家换队</span>    playerDirector<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token string">'changeTeam'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个工厂类来创建玩家 </span>var heroFactory <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个新的玩家对象</span>    var newHero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Hero</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>teamColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给中介者发送消息，新增玩家</span>    playerDirector<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token string">'addPlayer'</span><span class="token punctuation">,</span>newHero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHero<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var playerDirector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var players <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 保存所有的玩家</span>        operations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中介者可以执行的操作</span>    <span class="token comment" spellcheck="true">// 新增一个玩家操作</span>    operations<span class="token punctuation">.</span>addPlayer <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取玩家队友的颜色</span>        var teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果该颜色的玩家还没有队伍的话，则新成立一个队伍</span>        players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加玩家进队伍</span>        players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除一个玩家</span>    operations<span class="token punctuation">.</span>removePlayer <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取队伍的颜色</span>        var teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 获取该队伍的所有成员</span>        teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> teamPlayers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>teamPlayers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>                teamPlayers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 玩家换队</span>    operations<span class="token punctuation">.</span>changeTeam <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span>newTeamColor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先从原队伍中删除</span>        operations<span class="token punctuation">.</span><span class="token function">removePlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 然后改变队伍的颜色</span>        player<span class="token punctuation">.</span>teamColor <span class="token operator">=</span> newTeamColor<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加到队伍中</span>        operations<span class="token punctuation">.</span><span class="token function">addPlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 玩家死亡</span>operations<span class="token punctuation">.</span>playerDead <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 玩家所在的队伍</span>    teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">;</span>    var all_dead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>player<span class="token punctuation">;</span> player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>state <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            all_dead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果all_dead 为true的话 说明全部死亡</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>all_dead<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 本队所有玩家lose</span>            player<span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var color in players<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>color <span class="token operator">!=</span><span class="token operator">=</span> teamColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 说明这是另外一组队伍</span>                <span class="token comment" spellcheck="true">// 获取该队伍的玩家</span>                var teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>player<span class="token punctuation">;</span> player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    player<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历通知其他玩家win了</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var ReceiveMessage <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// arguments的第一个参数为消息名称 获取第一个参数</span>    var message <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    operations<span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">{</span>    ReceiveMessage <span class="token operator">:</span> ReceiveMessage<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 红队</span>var p1 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p2 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p3 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        p4 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 蓝队</span>    var p5 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"ee"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        p6 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"ff"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        p7 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"gg"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        p8 <span class="token operator">=</span> <span class="token function">heroFactory</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 让红队玩家全部死亡</span>    p1<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p4<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lose:aa lose:bb lose:cc lose:dd </span>   <span class="token comment" spellcheck="true">// win:ee win:ff win:gg win:hh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到如上代码；玩家与玩家之间的耦合代码已经解除了，而把所有的逻辑操作放在中介者对象里面进去处理，某个玩家的任何操作不需要去遍历去通知其他玩家，而只是需要给中介者发送一个消息即可，中介者接受到该消息后进行处理，处理完消息之后会把处理结果反馈给其他的玩家对象。使用中介者模式解除了对象与对象之间的耦合代码; 使程序更加的灵活.</p><p>中介者模式实现购买商品的列子</p><p>下面的列子是书上的列子，比如在淘宝或者天猫的列子不是这样实现的，也没有关系，我们可以改动下即可，我们最主要来学习下使用中介者模式来实现的思路。</p><p>首先先介绍一下业务：在购买流程中，可以选择手机的颜色以及输入购买的数量，同时页面中有2个展示区域，分别显示用户刚刚选择好的颜色和数量。还有一个按钮动态显示下一步的操作，我们需要查询该颜色手机对应的库存，如果库存数量小于这次的购买数量，按钮则被禁用并且显示库存不足的文案，反之按钮高亮且可以点击并且显示假如购物车。</p><p>HTML代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">选择颜色<span class="token operator">:</span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"colorSelect"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span>红色<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>蓝色<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>输入购买的数量<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"numberInput"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    你选择了的颜色：<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"colorInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>你输入的数量<span class="token operator">:</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"numberInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"nextBtn"</span> disabled<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>请选择手机颜色和购买数量<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先页面上有一个select选择框，然后有输入的购买数量输入框，还有2个展示区域，分别是选择的颜色和输入的数量的显示的区域，还有下一步的按钮操作；</p><p>我们先定义一下：</p><p>假设我们提前从后台获取到所有颜色手机的库存量</p><pre class="line-numbers language-cpp"><code class="language-cpp">var goods <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手机库存</span>    <span class="token string">"red"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token string">"blue"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着 我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，然后在这两个事件中作出相应的处理</p><p>常规的JS代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 假设我们提前从后台获取到所有颜色手机的库存量</span>var goods <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手机库存</span>    <span class="token string">"red"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token string">"blue"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，然后在这两个事件中作出相应的处理*/</span>var colorSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"colorSelect"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    numberInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"numberInput"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    colorInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"colorInfo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    numberInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"numberInfo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nextBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"nextBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听change事件</span>colorSelect<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>numberInput<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var color <span class="token operator">=</span> colorSelect<span class="token punctuation">.</span>value<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 颜色</span>        number <span class="token operator">=</span> numberInput<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 数量</span>        stock <span class="token operator">=</span> goods<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该颜色手机对应的当前库存</span>    colorInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> color<span class="token punctuation">;</span>    numberInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果用户没有选择颜色的话，禁用按钮</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请选择手机颜色"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断用户输入的购买数量是否是正整数</span>    var reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\d<span class="token operator">+</span>$<span class="token operator">/</span>g<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入正确的购买数量"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果当前选择的数量大于当前的库存的数量的话，显示库存不足</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">></span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"库存不足"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"放入购物车"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码虽然是完成了页面上的需求，但是我们的代码都耦合在一起了，目前虽然问题不是很多，假如随着以后需求的改变，SKU属性越来越多的话，比如页面增加一个或者多个下拉框的时候，代表选择手机内存，现在我们需要计算颜色，内存和购买数量，来判断nextBtn是显示库存不足还是放入购物车；代码如下：</p><p>HTML代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">选择颜色<span class="token operator">:</span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"colorSelect"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span>红色<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>蓝色<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    选择内存：    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"memorySelect"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>请选择<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"32G"</span><span class="token operator">></span>32G<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"64G"</span><span class="token operator">></span>64G<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>输入购买的数量<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"numberInput"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    你选择了的颜色：<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"colorInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    你选择了内存：<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"memoryInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>你输入的数量<span class="token operator">:</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"numberInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"nextBtn"</span> disabled<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>请选择手机颜色和购买数量<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS代码变为如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 假设我们提前从后台获取到所有颜色手机的库存量</span>var goods <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手机库存</span>    <span class="token string">"red|32G"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token string">"red|64G"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token string">"blue|32G"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token string">"blue|64G"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，然后在这两个事件中作出相应的处理 */</span>var colorSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"colorSelect"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    memorySelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"memorySelect"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    numberInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"numberInput"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    colorInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"colorInfo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    numberInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"numberInfo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    memoryInfo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"memoryInfo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nextBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"nextBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听change事件</span>colorSelect<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>numberInput<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>memorySelect<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var color <span class="token operator">=</span> colorSelect<span class="token punctuation">.</span>value<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 颜色</span>        number <span class="token operator">=</span> numberInput<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 数量</span>        memory <span class="token operator">=</span> memorySelect<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 内存</span>        stock <span class="token operator">=</span> goods<span class="token punctuation">[</span>color <span class="token operator">+</span> <span class="token string">'|'</span> <span class="token operator">+</span>memory<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该颜色手机对应的当前库存</span>    colorInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> color<span class="token punctuation">;</span>    numberInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> number<span class="token punctuation">;</span>    memoryInfo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果用户没有选择颜色的话，禁用按钮</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请选择手机颜色"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断用户输入的购买数量是否是正整数</span>        var reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\d<span class="token operator">+</span>$<span class="token operator">/</span>g<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入正确的购买数量"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前选择的数量大于当前的库存的数量的话，显示库存不足</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">></span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"库存不足"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextBtn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        nextBtn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"放入购物车"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般的代码就是这样的，感觉使用中介者模式代码也类似，这里就不多介绍了，书上的代码说有优点，但是个人感觉没有什么很大的区别，因此这里就不再使用中介者模式来编写代码了。<br>(JavaScript 中常见设计模式整理)[<a href="https://juejin.im/post/6844903607452581896]" target="_blank" rel="noopener">https://juejin.im/post/6844903607452581896]</a></p><h4 id="Vue-React中有应用什么设计模式"><a href="#Vue-React中有应用什么设计模式" class="headerlink" title="Vue/React中有应用什么设计模式"></a>Vue/React中有应用什么设计模式</h4><p>(react/vue中的设计模式)[<a href="https://segmentfault.com/a/1190000037673673]" target="_blank" rel="noopener">https://segmentfault.com/a/1190000037673673]</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(7)</title>
      <link href="/2020/11/16/sort-algorithms7/"/>
      <url>/2020/11/16/sort-algorithms7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-HTTP"><a href="#1-1-HTTP" class="headerlink" title="1.1 HTTP"></a>1.1 HTTP</h3><hr><h4 id="常见的状态码有哪些"><a href="#常见的状态码有哪些" class="headerlink" title="常见的状态码有哪些"></a>常见的状态码有哪些</h4><h4 id="304表示什么-和302有什么区别"><a href="#304表示什么-和302有什么区别" class="headerlink" title="304表示什么,和302有什么区别"></a>304表示什么,和302有什么区别</h4><p>(如何理解HTTP响应的状态码)[<a href="https://harttle.land/2015/08/15/http-status-code.html#header-0]" target="_blank" rel="noopener">https://harttle.land/2015/08/15/http-status-code.html#header-0]</a></p><h4 id="介绍下HTTP缓存策略"><a href="#介绍下HTTP缓存策略" class="headerlink" title="介绍下HTTP缓存策略"></a>介绍下HTTP缓存策略</h4><p>(浏览器缓存)[<a href="https://github.com/xiangxingchen/blog/issues/9]" target="_blank" rel="noopener">https://github.com/xiangxingchen/blog/issues/9]</a></p><h4 id="Connection为Keep-alive表示什么"><a href="#Connection为Keep-alive表示什么" class="headerlink" title="Connection为Keep-alive表示什么"></a>Connection为Keep-alive表示什么</h4><p>(HTTP keep-alive 二三事)[<a href="https://lotabout.me/2019/Things-about-keepalive/]" target="_blank" rel="noopener">https://lotabout.me/2019/Things-about-keepalive/]</a></p><h3 id="1-2-DNS"><a href="#1-2-DNS" class="headerlink" title="1.2 DNS"></a>1.2 DNS</h3><hr><h4 id="介绍下DNS"><a href="#介绍下DNS" class="headerlink" title="介绍下DNS"></a>介绍下DNS</h4><p>(写给前端工程师的DNS基础知识)[<a href="http://www.sunhao.win/articles/netwrok-dns.html]" target="_blank" rel="noopener">http://www.sunhao.win/articles/netwrok-dns.html]</a></p><h3 id="1-3-TCP"><a href="#1-3-TCP" class="headerlink" title="1.3 TCP"></a>1.3 TCP</h3><hr><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>(通俗大白话来理解TCP协议的三次握手和四次分手)[<a href="https://github.com/jawil/blog/issues/14]" target="_blank" rel="noopener">https://github.com/jawil/blog/issues/14]</a></p><h3 id="1-4-HTTPS"><a href="#1-4-HTTPS" class="headerlink" title="1.4 HTTPS"></a>1.4 HTTPS</h3><hr><h4 id="介绍下HTTPS的工作原理"><a href="#介绍下HTTPS的工作原理" class="headerlink" title="介绍下HTTPS的工作原理"></a>介绍下HTTPS的工作原理</h4><h4 id="HTTPS和HTTP有什么区别"><a href="#HTTPS和HTTP有什么区别" class="headerlink" title="HTTPS和HTTP有什么区别"></a>HTTPS和HTTP有什么区别</h4><p>(看图学HTTPS)[<a href="https://juejin.im/post/6844903608421449742]" target="_blank" rel="noopener">https://juejin.im/post/6844903608421449742]</a><br>(谈谈HTTPS)[<a href="https://juejin.im/post/6844903504046211079#heading-6]" target="_blank" rel="noopener">https://juejin.im/post/6844903504046211079#heading-6]</a></p><h3 id="1-5-CDN"><a href="#1-5-CDN" class="headerlink" title="1.5 CDN"></a>1.5 CDN</h3><hr><h4 id="介绍一下CDN是什么以及它应用的场景"><a href="#介绍一下CDN是什么以及它应用的场景" class="headerlink" title="介绍一下CDN是什么以及它应用的场景"></a>介绍一下CDN是什么以及它应用的场景</h4><p>(漫话：如何给女朋友解释什么是CDN？)[<a href="https://juejin.im/post/6844903906296725518]" target="_blank" rel="noopener">https://juejin.im/post/6844903906296725518]</a></p><h4 id="CDN回源是什么"><a href="#CDN回源是什么" class="headerlink" title="CDN回源是什么"></a>CDN回源是什么</h4><p>当 cdn 缓存服务器中没有符合客户端要求的资源的时候，缓存服务器会请求上一级缓存服务器，以此类推，直到获取到。最后如果还是没有，就会回到我们自己的服务器去获取资源。<br>那都有哪些时候会回源呢？没有资源，资源过期，访问的资源是不缓存资源等都会导致回源。其他情况欢迎小伙伴们在评论区补充~</p><h3 id="1-6-从输入URL到页面展示发生了什么-一个老套但是经典的问题"><a href="#1-6-从输入URL到页面展示发生了什么-一个老套但是经典的问题" class="headerlink" title="1.6 从输入URL到页面展示发生了什么 一个老套但是经典的问题"></a>1.6 从输入URL到页面展示发生了什么 一个老套但是经典的问题</h3><hr><p>(前端经典面试题)(<a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(6)</title>
      <link href="/2020/11/12/sort-algorithms6/"/>
      <url>/2020/11/12/sort-algorithms6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-介绍一下TypeScript"><a href="#1-1-介绍一下TypeScript" class="headerlink" title="1.1 介绍一下TypeScript"></a>1.1 介绍一下TypeScript</h3><hr><p>TypeScript 也被称作 AnyScript，因为你在 coding 的时候需要为每个变量设一个 any 的类型。<br>咳咳，开玩笑开玩笑，可别真的让每个变量都是 any，会被疯狂吐槽的。</p><p>TypeScript 是微软开发一款开源的编程语言，它是 JavaScript 的一个超集，本质上是为 JavaScript 增加了静态类型声明。任何的 JavaScript 代码都可以在其中使用，不会有任何问题。TypeScript 最终也会被编译成 JavaScript，使其在浏览器、Node 中等环境中使用。</p><h3 id="1-2-TypeScript和JavaScript相比有什么优势"><a href="#1-2-TypeScript和JavaScript相比有什么优势" class="headerlink" title="1.2 TypeScript和JavaScript相比有什么优势"></a>1.2 TypeScript和JavaScript相比有什么优势</h3><hr><p>TypeScript 相比于 JavaScript 具有以下优势：</p><p>更好的可维护性和可读性<br>引入了静态类型声明，不需要太多的注释和文档，大部分的函数看类型定义就知道如何使用了<br>在编译阶段就能发现大部分因为变量类型导致的错误<br>…</p><h3 id="1-3-介绍一下泛型-一般会用在什么地方"><a href="#1-3-介绍一下泛型-一般会用在什么地方" class="headerlink" title="1.3 介绍一下泛型,一般会用在什么地方"></a>1.3 介绍一下泛型,一般会用在什么地方</h3><hr><p>(你不知道的 TypeScript 泛型（万字长文，建议收藏）)[<a href="https://lucifer.ren/blog/2020/06/16/ts-generics/]" target="_blank" rel="noopener">https://lucifer.ren/blog/2020/06/16/ts-generics/]</a></p><h3 id="1-4-介绍一下interface"><a href="#1-4-介绍一下interface" class="headerlink" title="1.4 介绍一下interface"></a>1.4 介绍一下interface</h3><hr><p>(官方文档)[<a href="https://www.tslang.cn/docs/handbook/interfaces.html]" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook/interfaces.html]</a></p><h3 id="1-5-d-ts是什么"><a href="#1-5-d-ts是什么" class="headerlink" title="1.5 d.ts是什么"></a>1.5 d.ts是什么</h3><hr><p>(声明文件)[<a href="https://ts.xcatliu.com/basics/declaration-files.html]" target="_blank" rel="noopener">https://ts.xcatliu.com/basics/declaration-files.html]</a></p><h3 id="1-6-TypeScript是如何编译的"><a href="#1-6-TypeScript是如何编译的" class="headerlink" title="1.6 TypeScript是如何编译的"></a>1.6 TypeScript是如何编译的</h3><hr><p>(编译过程)[<a href="https://zhuanlan.zhihu.com/p/45898674]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/45898674]</a></p><h3 id="1-7-namespace-module"><a href="#1-7-namespace-module" class="headerlink" title="1.7 namespace/module"></a>1.7 namespace/module</h3><hr><p>(命名空间)[<a href="https://www.tslang.cn/docs/handbook/namespaces.html]" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook/namespaces.html]</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(5)</title>
      <link href="/2020/11/12/sort-algorithms5/"/>
      <url>/2020/11/12/sort-algorithms5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-打包优化"><a href="#1-1-打包优化" class="headerlink" title="1.1 打包优化"></a>1.1 打包优化</h3><hr><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><h5 id="1-loader"><a href="#1-loader" class="headerlink" title="1.loader"></a>1.loader</h5><h5 id="2-dll"><a href="#2-dll" class="headerlink" title="2.dll"></a>2.dll</h5><h5 id="3-happypack"><a href="#3-happypack" class="headerlink" title="3.happypack"></a>3.happypack</h5><h5 id="4-压缩代码"><a href="#4-压缩代码" class="headerlink" title="4.压缩代码"></a>4.压缩代码</h5><p><a href="https://segmentfault.com/a/1190000018493260" target="_blank" rel="noopener">性能优化篇—Webpack构建速度优化</a></p><h5 id="5-tree-shaking"><a href="#5-tree-shaking" class="headerlink" title="5.tree shaking"></a>5.tree shaking</h5><h5 id="6-scope-hoisting"><a href="#6-scope-hoisting" class="headerlink" title="6.scope hoisting"></a>6.scope hoisting</h5><h5 id="7-code-splitting"><a href="#7-code-splitting" class="headerlink" title="7.code splitting"></a>7.code splitting</h5><p><a href="https://github.com/sunorry/shuchu/issues/1" target="_blank" rel="noopener">tree-shaking, scope hoisting, code-splitting 简介</a></p><h4 id="图片base64-cdn"><a href="#图片base64-cdn" class="headerlink" title="图片base64,cdn"></a>图片base64,cdn</h4><p><a href="https://juejin.im/post/6844903655330562062#heading-4" target="_blank" rel="noopener">图片优化,CDN</a></p><h3 id="1-2-网络优化"><a href="#1-2-网络优化" class="headerlink" title="1.2 网络优化"></a>1.2 网络优化</h3><hr><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><h4 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h4><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h4 id="preload-prefetch-懒加载"><a href="#preload-prefetch-懒加载" class="headerlink" title="preload/prefetch/懒加载"></a>preload/prefetch/懒加载</h4><h4 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h4><h3 id="1-2-代码优化"><a href="#1-2-代码优化" class="headerlink" title="1.2 代码优化"></a>1.2 代码优化</h3><hr><h4 id="loading-骨架屏"><a href="#loading-骨架屏" class="headerlink" title="loading/骨架屏"></a>loading/骨架屏</h4><h4 id="web-worker"><a href="#web-worker" class="headerlink" title="web worker"></a>web worker</h4><h4 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h4><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><h4 id="dom-style批量更新"><a href="#dom-style批量更新" class="headerlink" title="dom/style批量更新"></a>dom/style批量更新</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(4)</title>
      <link href="/2020/11/08/sort-algorithms4/"/>
      <url>/2020/11/08/sort-algorithms4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-webpack"><a href="#1-1-webpack" class="headerlink" title="1.1 webpack"></a>1.1 webpack</h3><hr><h4 id="介绍下webpack的构建流程"><a href="#介绍下webpack的构建流程" class="headerlink" title="介绍下webpack的构建流程"></a>介绍下webpack的构建流程</h4><p>关于 webpack 的工作流程，简单来说可以概括为以下几步：<br>1.参数解析<br>2.找到入口文件<br>3.调用 Loader 编译文件<br>4.遍历 AST，收集依赖<br>5.生成 Chunk<br>6.输出文件<br>其中，真正起编译作用的便是 Loader，本文也就 Loader 进行详细的阐述，其余部分暂且不谈。</p><h4 id="webpack和rollup有什么相同和不同点"><a href="#webpack和rollup有什么相同和不同点" class="headerlink" title="webpack和rollup有什么相同和不同点"></a>webpack和rollup有什么相同和不同点</h4><p><a href="https://juejin.im/post/6844903473700405261" target="_blank" rel="noopener">同中有异的 Webpack 与 Rollup</a></p><h4 id="介绍下Loader"><a href="#介绍下Loader" class="headerlink" title="介绍下Loader"></a>介绍下Loader</h4><h4 id="介绍下Plugin"><a href="#介绍下Plugin" class="headerlink" title="介绍下Plugin"></a>介绍下Plugin</h4><p><a href="https://zhuanlan.zhihu.com/p/28245984" target="_blank" rel="noopener">webpack之loader和plugin简介</a></p><h4 id="webpack热更新是如何实现的"><a href="#webpack热更新是如何实现的" class="headerlink" title="webpack热更新是如何实现的"></a>webpack热更新是如何实现的</h4><p><a href="https://juejin.im/post/6844904008432222215#heading-0" target="_blank" rel="noopener">轻松理解webpack热更新原理</a></p><h4 id="webpack层面如何做性能优化"><a href="#webpack层面如何做性能优化" class="headerlink" title="webpack层面如何做性能优化"></a>webpack层面如何做性能优化</h4><p><a href="https://juejin.im/post/6844903673009537038" target="_blank" rel="noopener">性能优化</a></p><h4 id="介绍下webpack的dll"><a href="#介绍下webpack的dll" class="headerlink" title="介绍下webpack的dll"></a>介绍下webpack的dll</h4><h4 id="介绍下webpack的tree-shaking"><a href="#介绍下webpack的tree-shaking" class="headerlink" title="介绍下webpack的tree-shaking"></a>介绍下webpack的tree-shaking</h4><h4 id="介绍下webpack的scope-hosting"><a href="#介绍下webpack的scope-hosting" class="headerlink" title="介绍下webpack的scope hosting"></a>介绍下webpack的scope hosting</h4><p>(<a href="https://juejin.im/post/6844904138044604430#heading-17" target="_blank" rel="noopener">https://juejin.im/post/6844904138044604430#heading-17</a>)</p><h3 id="1-2-babel"><a href="#1-2-babel" class="headerlink" title="1.2 babel"></a>1.2 babel</h3><hr><h4 id="介绍一下babel的原理"><a href="#介绍一下babel的原理" class="headerlink" title="介绍一下babel的原理"></a>介绍一下babel的原理</h4><p><a href="https://www.zoo.team/article/babel" target="_blank" rel="noopener">前端工程师需要了解的 Babel 知识</a></p><h3 id="1-3-模板引擎"><a href="#1-3-模板引擎" class="headerlink" title="1.3 模板引擎"></a>1.3 模板引擎</h3><hr><h4 id="如何实现一个最简单的模板引擎"><a href="#如何实现一个最简单的模板引擎" class="headerlink" title="如何实现一个最简单的模板引擎"></a>如何实现一个最简单的模板引擎</h4><p><a href="https://www.liaoxuefeng.com/article/1006272230979008" target="_blank" rel="noopener">编写一个简单的JavaScript模板引擎</a></p><h3 id="1-4-前端发布"><a href="#1-4-前端发布" class="headerlink" title="1.4 前端发布"></a>1.4 前端发布</h3><hr><h4 id="一个前端页面是如何发布到线上的"><a href="#一个前端页面是如何发布到线上的" class="headerlink" title="一个前端页面是如何发布到线上的"></a>一个前端页面是如何发布到线上的</h4><h4 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h4><h4 id="增量发布"><a href="#增量发布" class="headerlink" title="增量发布"></a>增量发布</h4><p><a href="https://www.zhihu.com/question/20790576" target="_blank" rel="noopener">大公司里怎样开发和部署前端代码？</a><br><a href="https://juejin.im/post/6844904086823780366" target="_blank" rel="noopener">前端高级进阶：前端部署的发展历程</a></p><h3 id="1-5-weex"><a href="#1-5-weex" class="headerlink" title="1.5 weex"></a>1.5 weex</h3><hr><h4 id="介绍下weex的原理"><a href="#介绍下weex的原理" class="headerlink" title="介绍下weex的原理"></a>介绍下weex的原理</h4><h4 id="为什么weex比H5快"><a href="#为什么weex比H5快" class="headerlink" title="为什么weex比H5快"></a>为什么weex比H5快</h4><h4 id="weex有什么缺点"><a href="#weex有什么缺点" class="headerlink" title="weex有什么缺点"></a>weex有什么缺点</h4><p><a href="https://juejin.im/post/6844903618290663438" target="_blank" rel="noopener">为什么要选择 Weex</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(3)</title>
      <link href="/2020/10/30/sort-algorithms3/"/>
      <url>/2020/10/30/sort-algorithms3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><h3 id="1-1-MVVM"><a href="#1-1-MVVM" class="headerlink" title="1.1 MVVM"></a>1.1 MVVM</h3><hr><h4 id="介绍下MVVM和MVC有什么区别"><a href="#介绍下MVVM和MVC有什么区别" class="headerlink" title="介绍下MVVM和MVC有什么区别"></a>介绍下MVVM和MVC有什么区别</h4><h4 id="ViewModel有什么好处"><a href="#ViewModel有什么好处" class="headerlink" title="ViewModel有什么好处"></a>ViewModel有什么好处</h4><p><a href="https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">参考这篇文章MVC,MVP,MVVM</a></p><h3 id="1-2-生命周期"><a href="#1-2-生命周期" class="headerlink" title="1.2 生命周期"></a>1.2 生命周期</h3><hr><h4 id="nextTick是如何实现的"><a href="#nextTick是如何实现的" class="headerlink" title="nextTick是如何实现的"></a>nextTick是如何实现的</h4><p>(你真的理解$nextTick么)[<a href="https://juejin.im/post/5cd9854b5188252035420a13]" target="_blank" rel="noopener">https://juejin.im/post/5cd9854b5188252035420a13]</a></p><h4 id="父子组件挂载时，生命周期顺序是怎么样的"><a href="#父子组件挂载时，生命周期顺序是怎么样的" class="headerlink" title="父子组件挂载时，生命周期顺序是怎么样的"></a>父子组件挂载时，生命周期顺序是怎么样的</h4><p>(React 源码剖析系列 － 生命周期的管理艺术)[<a href="https://zhuanlan.zhihu.com/p/20312691]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20312691]</a></p><h3 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h3><hr><h4 id="Vue的双向绑定是如何实现的"><a href="#Vue的双向绑定是如何实现的" class="headerlink" title="Vue的双向绑定是如何实现的"></a>Vue的双向绑定是如何实现的</h4><p>1.数据劫持<br>2.发布订阅<br>(vue双向绑定原理解析)[<a href="https://juejin.im/post/6844904084114259981#heading-1]" target="_blank" rel="noopener">https://juejin.im/post/6844904084114259981#heading-1]</a></p><h4 id="Vue2中关于数组和对象数据观察时有做什么特殊处理吗"><a href="#Vue2中关于数组和对象数据观察时有做什么特殊处理吗" class="headerlink" title="Vue2中关于数组和对象数据观察时有做什么特殊处理吗"></a>Vue2中关于数组和对象数据观察时有做什么特殊处理吗</h4><h4 id="defineProperty和proxy有什么区别"><a href="#defineProperty和proxy有什么区别" class="headerlink" title="defineProperty和proxy有什么区别"></a>defineProperty和proxy有什么区别</h4><h4 id="Vue中的数据为什么频繁变化但只会更新一次"><a href="#Vue中的数据为什么频繁变化但只会更新一次" class="headerlink" title="Vue中的数据为什么频繁变化但只会更新一次"></a>Vue中的数据为什么频繁变化但只会更新一次</h4><p>(点我就好了)[<a href="https://juejin.im/post/6844903601416978439#heading-12]" target="_blank" rel="noopener">https://juejin.im/post/6844903601416978439#heading-12]</a></p><h3 id="1-4-状态管理"><a href="#1-4-状态管理" class="headerlink" title="1.4 状态管理"></a>1.4 状态管理</h3><hr><h4 id="什么是状态管理，为什么需要状态管理"><a href="#什么是状态管理，为什么需要状态管理" class="headerlink" title="什么是状态管理，为什么需要状态管理"></a>什么是状态管理，为什么需要状态管理</h4><h4 id="介绍一下Vuex和Redux"><a href="#介绍一下Vuex和Redux" class="headerlink" title="介绍一下Vuex和Redux"></a>介绍一下Vuex和Redux</h4><h4 id="Vuex和Redux有什么区别"><a href="#Vuex和Redux有什么区别" class="headerlink" title="Vuex和Redux有什么区别"></a>Vuex和Redux有什么区别</h4><p>(看这一篇)[<a href="https://zhuanlan.zhihu.com/p/53599723]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53599723]</a></p><h4 id="如果让你实现一个简单的状态管理，要如何实现"><a href="#如果让你实现一个简单的状态管理，要如何实现" class="headerlink" title="如果让你实现一个简单的状态管理，要如何实现"></a>如果让你实现一个简单的状态管理，要如何实现</h4><p>(实现状态管理)[<a href="https://juejin.im/post/6844903660804112391#heading-3]" target="_blank" rel="noopener">https://juejin.im/post/6844903660804112391#heading-3]</a></p><h3 id="1-5-组建通信"><a href="#1-5-组建通信" class="headerlink" title="1.5 组建通信"></a>1.5 组建通信</h3><hr><h4 id="父子组件如何进行通信"><a href="#父子组件如何进行通信" class="headerlink" title="父子组件如何进行通信"></a>父子组件如何进行通信</h4><h4 id="爷孙组件如何进行通信"><a href="#爷孙组件如何进行通信" class="headerlink" title="爷孙组件如何进行通信"></a>爷孙组件如何进行通信</h4><h4 id="兄弟组件如何进行通信"><a href="#兄弟组件如何进行通信" class="headerlink" title="兄弟组件如何进行通信"></a>兄弟组件如何进行通信</h4><p>(vue中8种组件通信方式)[<a href="https://juejin.im/post/6844903887162310669]" target="_blank" rel="noopener">https://juejin.im/post/6844903887162310669]</a></p><h3 id="1-6-Virtual-DOM"><a href="#1-6-Virtual-DOM" class="headerlink" title="1.6 Virtual DOM"></a>1.6 Virtual DOM</h3><hr><h4 id="Virtual-DOM是什么"><a href="#Virtual-DOM是什么" class="headerlink" title="Virtual DOM是什么"></a>Virtual DOM是什么</h4><h4 id="为什么需要Virtual-DOM"><a href="#为什么需要Virtual-DOM" class="headerlink" title="为什么需要Virtual DOM"></a>为什么需要Virtual DOM</h4><h4 id="Vue的Virtual-DOM解决了什么问题"><a href="#Vue的Virtual-DOM解决了什么问题" class="headerlink" title="Vue的Virtual DOM解决了什么问题"></a>Vue的Virtual DOM解决了什么问题</h4><p>(虚拟 DOM)[<a href="https://mp.weixin.qq.com/s/oAlVmZ4Hbt2VhOwFEkNEhw]" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/oAlVmZ4Hbt2VhOwFEkNEhw]</a></p><h3 id="1-8-diff"><a href="#1-8-diff" class="headerlink" title="1.8 diff"></a>1.8 diff</h3><hr><h4 id="Vue的diff策略和React的diff策略有什么不同"><a href="#Vue的diff策略和React的diff策略有什么不同" class="headerlink" title="Vue的diff策略和React的diff策略有什么不同"></a>Vue的diff策略和React的diff策略有什么不同</h4><h4 id="介绍一下Vue的diff策略"><a href="#介绍一下Vue的diff策略" class="headerlink" title="介绍一下Vue的diff策略"></a>介绍一下Vue的diff策略</h4><p>(vue)[<a href="https://juejin.im/post/6844903607913938951#heading-3]" target="_blank" rel="noopener">https://juejin.im/post/6844903607913938951#heading-3]</a></p><h4 id="介绍一下React的diff策略"><a href="#介绍一下React的diff策略" class="headerlink" title="介绍一下React的diff策略"></a>介绍一下React的diff策略</h4><p>(react)[<a href="https://zhuanlan.zhihu.com/p/20346379]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20346379]</a></p><h4 id="key有什么用"><a href="#key有什么用" class="headerlink" title="key有什么用"></a>key有什么用</h4><h3 id="1-9-Vue-computed-watch原理"><a href="#1-9-Vue-computed-watch原理" class="headerlink" title="1.9 Vue computed/watch原理"></a>1.9 Vue computed/watch原理</h3><hr><h4 id="computed是如何实现的"><a href="#computed是如何实现的" class="headerlink" title="computed是如何实现的"></a>computed是如何实现的</h4><h4 id="watch是如何实现的"><a href="#watch是如何实现的" class="headerlink" title="watch是如何实现的"></a>watch是如何实现的</h4><h4 id="computed的时候可以引用其他computed属性-是如何实现的"><a href="#computed的时候可以引用其他computed属性-是如何实现的" class="headerlink" title="computed的时候可以引用其他computed属性,是如何实现的"></a>computed的时候可以引用其他computed属性,是如何实现的</h4><p>(vue计算属性和监听属性)[<a href="https://juejin.im/post/6844903667884097543]" target="_blank" rel="noopener">https://juejin.im/post/6844903667884097543]</a></p><h3 id="1-10-React-HooK-了解一下是什么"><a href="#1-10-React-HooK-了解一下是什么" class="headerlink" title="1.10 React HooK 了解一下是什么"></a>1.10 React HooK 了解一下是什么</h3><hr><p>(React Hooks 入门教程)[<a href="https://www.ruanyifeng.com/blog/2019/09/react-hooks.html]" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2019/09/react-hooks.html]</a></p><h3 id="1-11-React-Hoc-Vue-mixin"><a href="#1-11-React-Hoc-Vue-mixin" class="headerlink" title="1.11 React Hoc/Vue mixin"></a>1.11 React Hoc/Vue mixin</h3><hr><h4 id="React的Hoc是什么"><a href="#React的Hoc是什么" class="headerlink" title="React的Hoc是什么"></a>React的Hoc是什么</h4><h4 id="Vue的mixin是什么"><a href="#Vue的mixin是什么" class="headerlink" title="Vue的mixin是什么"></a>Vue的mixin是什么</h4><h4 id="Hoc和mixin有什么区别"><a href="#Hoc和mixin有什么区别" class="headerlink" title="Hoc和mixin有什么区别"></a>Hoc和mixin有什么区别</h4><h4 id="为什么Vue没有高阶组件"><a href="#为什么Vue没有高阶组件" class="headerlink" title="为什么Vue没有高阶组件"></a>为什么Vue没有高阶组件</h4><p>(这一篇)[<a href="https://juejin.im/post/6844903477798256647#heading-9]" target="_blank" rel="noopener">https://juejin.im/post/6844903477798256647#heading-9]</a></p><h3 id="1-11-Vue和React有什么不同"><a href="#1-11-Vue和React有什么不同" class="headerlink" title="1.11 Vue和React有什么不同"></a>1.11 Vue和React有什么不同</h3><hr><h4 id="现在有一个项目，你是如何考虑使用Vue还是React"><a href="#现在有一个项目，你是如何考虑使用Vue还是React" class="headerlink" title="现在有一个项目，你是如何考虑使用Vue还是React"></a>现在有一个项目，你是如何考虑使用Vue还是React</h4><h4 id="从多个角度具体说一下Vue和React有什么区别"><a href="#从多个角度具体说一下Vue和React有什么区别" class="headerlink" title="从多个角度具体说一下Vue和React有什么区别"></a>从多个角度具体说一下Vue和React有什么区别</h4><p>从思想、生态、语法、数据、通信、diff等角度自己总结一下吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(2)</title>
      <link href="/2020/10/29/sort-algorithms2/"/>
      <url>/2020/10/29/sort-algorithms2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)<br><img src="css.png" alt></p><h3 id="1-1-position"><a href="#1-1-position" class="headerlink" title="1.1 position"></a>1.1 position</h3><hr><p><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html" target="_blank" rel="noopener">CSS 定位详解</a></p><h3 id="1-2-行内元素-块状元素"><a href="#1-2-行内元素-块状元素" class="headerlink" title="1.2 行内元素/块状元素"></a>1.2 行内元素/块状元素</h3><hr><p>1.行内元素<br>不会自动换行<br>设置宽高无效<br>设置margin上下方向无效，左右方向有效<br>设置padding上下左右方向都有效<br>常用的元素有：span 、a、b、br、u、ur等等<br>2.块状元素<br>自动换行<br>可以识别宽高<br>设置margin和padding的上下左右均有效<br>多个块状元素标签写在一起，默认排列方式为从上至下<br>3.行内块状元素<br>不会自动换行<br>可以识别宽高<br>默认排列方式为从左到右<br>常用的元素有：img、input、td等        </p><h3 id="1-3-flex"><a href="#1-3-flex" class="headerlink" title="1.3 flex"></a>1.3 flex</h3><hr><h4 id="介绍下flex布局"><a href="#介绍下flex布局" class="headerlink" title="介绍下flex布局"></a>介绍下flex布局</h4><h4 id="如何用flex实现九宫格布局"><a href="#如何用flex实现九宫格布局" class="headerlink" title="如何用flex实现九宫格布局"></a>如何用flex实现九宫格布局</h4><h4 id="flex-1指的是什么-flex属性默认值是什么"><a href="#flex-1指的是什么-flex属性默认值是什么" class="headerlink" title="flex:1指的是什么 flex属性默认值是什么"></a>flex:1指的是什么 flex属性默认值是什么</h4><h4 id="分别介绍一下flex-shrink和flex-basis属性"><a href="#分别介绍一下flex-shrink和flex-basis属性" class="headerlink" title="分别介绍一下flex-shrink和flex-basis属性"></a>分别介绍一下flex-shrink和flex-basis属性</h4><p>上面看这一篇就够了<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程</a></p><h4 id="grid也一起看一下"><a href="#grid也一起看一下" class="headerlink" title="grid也一起看一下"></a>grid也一起看一下</h4><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">grid网格布局</a></p><h3 id="1-4-1px"><a href="#1-4-1px" class="headerlink" title="1.4 1px"></a>1.4 1px</h3><hr><h4 id="移动端1px问题是怎么解决的"><a href="#移动端1px问题是怎么解决的" class="headerlink" title="移动端1px问题是怎么解决的"></a>移动端1px问题是怎么解决的</h4><p>一、产生原因<br>那么为什么会产生这个问题呢？主要是跟一个东西有关，DPR(devicePixelRatio) 设备像素比，它是默认缩放为100%的情况下，设备像素和CSS像素的比值。<br>window.devicePixelRatio=物理像素 /CSS像素<br>二、解决方案这里只细说最常用的两种方案<br>1、WWDC对iOS统给出的方案<br>2、使用边框图片<br>3、使用box-shadow实现<br><strong>4、使用伪元素</strong><br>1 条border</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span>setOnePx<span class="token punctuation">{</span>  position<span class="token operator">:</span> relative<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token operator">::</span>after<span class="token punctuation">{</span>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>    content<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #e5e5e5<span class="token punctuation">;</span>    display<span class="token operator">:</span> block<span class="token punctuation">;</span>    width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token operator">:</span> 1px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*no*/</span>    transform<span class="token operator">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制代码可以看到，将伪元素设置绝对定位，并且和父元素的左上角对齐，将width 设置100%，height设置为1px，然后进行在Y方向缩小0.5倍。<br>4 条border</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span>setBorderAll<span class="token punctuation">{</span>     position<span class="token operator">:</span> relative<span class="token punctuation">;</span>       <span class="token operator">&amp;</span><span class="token operator">:</span>after<span class="token punctuation">{</span>           content<span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">;</span>           position<span class="token operator">:</span>absolute<span class="token punctuation">;</span>           top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           width<span class="token operator">:</span> <span class="token number">200</span><span class="token operator">%</span><span class="token punctuation">;</span>           height<span class="token operator">:</span> <span class="token number">200</span><span class="token operator">%</span><span class="token punctuation">;</span>           transform<span class="token operator">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           transform<span class="token operator">-</span>origin<span class="token operator">:</span> left top<span class="token punctuation">;</span>           box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>           border<span class="token operator">:</span> 1px solid #E5E5E5<span class="token punctuation">;</span>           border<span class="token operator">-</span>radius<span class="token operator">:</span> 4px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制代码同样为伪元素设置绝对定位，并且和父元素左上角对其。将伪元素的长和宽先放大2倍，然后再设置一个边框，以左上角为中心，缩放到原来的0.5倍<br>总结：<br>优点：全机型兼容，实现了真正的1px，而且可以圆角。<br>缺点：暂用了after 伪元素，可能影响清除浮动。<br>5、设置viewport的scale值<br>这个解决方案是利用viewport+rem+js 实现的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>      <span class="token operator">&lt;</span>title<span class="token operator">></span>1px question<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>      <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> id<span class="token operator">=</span><span class="token string">"WebViewport"</span> content<span class="token operator">=</span><span class="token string">"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>style<span class="token operator">></span>          html <span class="token punctuation">{</span>              font<span class="token operator">-</span>size<span class="token operator">:</span> 1px<span class="token punctuation">;</span>          <span class="token punctuation">}</span>                      <span class="token operator">*</span> <span class="token punctuation">{</span>              padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>              margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">.</span>top_b <span class="token punctuation">{</span>              border<span class="token operator">-</span>bottom<span class="token operator">:</span> 1px solid #E5E5E5<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span>b <span class="token punctuation">{</span>                      box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>              margin<span class="token operator">-</span>top<span class="token operator">:</span> 1rem<span class="token punctuation">;</span>              padding<span class="token operator">:</span> 1rem<span class="token punctuation">;</span>                              font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>4rem<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">.</span>a <span class="token punctuation">{</span>              width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">.</span>b <span class="token punctuation">{</span>              background<span class="token operator">:</span> #f5f5f5<span class="token punctuation">;</span>              width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>      <span class="token operator">&lt;</span>script<span class="token operator">></span>          var viewport <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"meta[name=viewport]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//下面是根据设备像素设置viewport</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              viewport<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              viewport<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'width=device-width,initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              viewport<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'width=device-width,initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          var docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>          var fontsize <span class="token operator">=</span> <span class="token number">32</span><span class="token operator">*</span> <span class="token punctuation">(</span>docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">750</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>          docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> fontsize<span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"top_b a"</span><span class="token operator">></span>下面的底边宽度是虚拟<span class="token number">1</span>像素的<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span>上面的边框宽度是虚拟<span class="token number">1</span>像素的<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结<br>优点：全机型兼容，直接写1px不能再方便<br>缺点：适用于新的项目，老项目可能改动大</p><h4 id="介绍下rem方案和vw方案-分别有什么优缺点"><a href="#介绍下rem方案和vw方案-分别有什么优缺点" class="headerlink" title="介绍下rem方案和vw方案,分别有什么优缺点"></a>介绍下rem方案和vw方案,分别有什么优缺点</h4><h4 id="rem方案的font-size是挂在哪的"><a href="#rem方案的font-size是挂在哪的" class="headerlink" title="rem方案的font-size是挂在哪的"></a>rem方案的font-size是挂在哪的</h4><h4 id="rem方案时移动端字体是怎么处理的"><a href="#rem方案时移动端字体是怎么处理的" class="headerlink" title="rem方案时移动端字体是怎么处理的"></a>rem方案时移动端字体是怎么处理的</h4><p><a href="https://cloud.tencent.com/developer/article/1352187" target="_blank" rel="noopener">以上参考这篇文章</a></p><h3 id="1-5-重绘回流"><a href="#1-5-重绘回流" class="headerlink" title="1.5 重绘回流"></a>1.5 重绘回流</h3><hr><h4 id="介绍一下重绘和回流"><a href="#介绍一下重绘和回流" class="headerlink" title="介绍一下重绘和回流"></a>介绍一下重绘和回流</h4><p>在讨论回流与重绘之前，我们要知道：<br>1.浏览器使用流式布局模型 (Flow Based Layout)。<br>2.浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了Render Tree。<br>3.有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。<br>4.由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。<br>一句话：回流必将引起重绘，重绘不一定会引起回流。<br><strong>回流 (Reflow)</strong><br>当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。<br>会导致回流的操作：<br>页面首次渲染<br>浏览器窗口大小发生改变<br>元素尺寸或位置发生改变<br>元素内容变化（文字数量或图片大小等等）<br>元素字体大小变化<br>添加或者删除可见的DOM元素<br>激活CSS伪类（例如：:hover）<br>查询某些属性或调用某些方法<br>一些常用且会导致回流的属性和方法：<br>clientWidth、clientHeight、clientTop、clientLeft<br>offsetWidth、offsetHeight、offsetTop、offsetLeft<br>scrollWidth、scrollHeight、scrollTop、scrollLeft<br>scrollIntoView()、scrollIntoViewIfNeeded()<br>getComputedStyle()<br>getBoundingClientRect()<br>scrollTo()<br><strong>重绘 (Repaint)</strong><br>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。<br><strong>性能影响</strong><br>回流比重绘的代价要更高。<br>有时即使仅仅回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。<br>现代浏览器会对频繁的回流或重绘操作进行优化：<br>浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。<br>当你访问以下属性或方法时，浏览器会立刻清空队列：<br>clientWidth、clientHeight、clientTop、clientLeft<br>offsetWidth、offsetHeight、offsetTop、offsetLeft<br>scrollWidth、scrollHeight、scrollTop、scrollLeft<br>width、height<br>getComputedStyle()<br>getBoundingClientRect()<br>因为队列中可能会有影响到这些属性或方法返回值的操作，即使你希望获取的信息与队列中操作引发的改变无关，浏览器也会强行清空队列，确保你拿到的值是最精确的。</p><h4 id="如何避免重绘和回流"><a href="#如何避免重绘和回流" class="headerlink" title="如何避免重绘和回流"></a>如何避免重绘和回流</h4><p><strong>CSS</strong><br>避免使用table布局。<br>尽可能在DOM树的最末端改变class。<br>避免设置多层内联样式。<br>将动画效果应用到position属性为absolute或fixed的元素上。<br>避免使用CSS表达式（例如：calc()）。<br><strong>JavaScript</strong><br>避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。<br>避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。<br>也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。<br>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。<br>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p><h3 id="1-6-居中-常见布局"><a href="#1-6-居中-常见布局" class="headerlink" title="1.6 居中/常见布局"></a>1.6 居中/常见布局</h3><hr><p>说难也不难可以参考这两篇文章包够<br>(CSS 常见布局方式)[<a href="https://juejin.im/post/6844903491891118087#heading-51]" target="_blank" rel="noopener">https://juejin.im/post/6844903491891118087#heading-51]</a><br>(干货!各种常见布局实现+知名网站实例分析)[<a href="https://juejin.im/post/6844903574929932301#heading-4]" target="_blank" rel="noopener">https://juejin.im/post/6844903574929932301#heading-4]</a></p><h3 id="1-7-层叠上下文-说一下z-index"><a href="#1-7-层叠上下文-说一下z-index" class="headerlink" title="1.7 层叠上下文 说一下z-index"></a>1.7 层叠上下文 说一下z-index</h3><hr><p>(深入理解CSS中的层叠上下文和层叠顺序)[<a href="https://juejin.im/post/6844904116339261447#heading-12]" target="_blank" rel="noopener">https://juejin.im/post/6844904116339261447#heading-12]</a></p><h3 id="1-8-Sass-Less"><a href="#1-8-Sass-Less" class="headerlink" title="1.8 Sass/Less"></a>1.8 Sass/Less</h3><hr><p>(Sass.vs.Less | 简介与比较)[<a href="https://juejin.im/post/6844904169313140749]" target="_blank" rel="noopener">https://juejin.im/post/6844904169313140749]</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年前端面试复习必读精选文章(1)</title>
      <link href="/2020/10/28/sort-algorithms/"/>
      <url>/2020/10/28/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注微信号【路飞】，干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给大家整理了一下每个 case 一些还算不错的文章吧（还包括一些躺在我收藏夹里的好文章），大家可以自己看文章总结一下答案，这样也会理解更深刻。</p><p><strong>并不是所有文章都需要看</strong>，希望是一个抛砖引玉的作用，大家也可以锻炼一下自己寻找有效资料的能力 ~</p><p>( 文章排序不分前后，随机排序 ~)</p><p><img src="jsjc.png" alt></p><h3 id="1-1-执行上下文-作用域链-闭包"><a href="#1-1-执行上下文-作用域链-闭包" class="headerlink" title="1.1 执行上下文/作用域链/闭包"></a>1.1 执行上下文/作用域链/闭包</h3><hr><h4 id="介绍一下javascript的执行上下文"><a href="#介绍一下javascript的执行上下文" class="headerlink" title="介绍一下javascript的执行上下文"></a>介绍一下javascript的执行上下文</h4><p>简而言之，执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。</p><ul><li><strong>全局执行上下文</strong>—-这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li><li><strong>函数执行上下文</strong>—-每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li><li><strong>Eval 函数执行上下文</strong>—-执行在 eval 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 eval，所以在这里我不会讨论它。</li></ul><p><img src="1.jpg" alt></p><h4 id="介绍一下javascript的作用域链"><a href="#介绍一下javascript的作用域链" class="headerlink" title="介绍一下javascript的作用域链"></a>介绍一下javascript的作用域链</h4><p>对于每个执行上下文，都有三个重要属性：变量对象(Variable object，VO) 作用域链(Scope chain) this<br>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链<br>静态作用域与动态作用域<br>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。<br>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p><h4 id="介绍一下javascript的闭包是什么，以及应用的场景"><a href="#介绍一下javascript的闭包是什么，以及应用的场景" class="headerlink" title="介绍一下javascript的闭包是什么，以及应用的场景"></a>介绍一下javascript的闭包是什么，以及应用的场景</h4><p>1）什么是闭包<br>函数执行后返回结果是一个内部函数，并被外部变量所引用，如果内部函数持有被执行函数作用域的变量，即形成了闭包。</p><p>可以在内部函数访问到外部函数作用域。使用闭包，一可以读取函数中的变量，二可以将函数中的变量存储在内存中，保护变量不被污染。而正因闭包会把函数中的变量值存储在内存中，会对内存有消耗，所以不能滥用闭包，否则会影响网页性能，造成内存泄漏。当不需要使用闭包时，要及时释放内存，可将内层函数对象的变量赋值为null。</p><p>2）闭包原理<br>函数执行分成两个阶段(预编译阶段和执行阶段)。</p><p>在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量值，如果已存在“闭包”，则只需要增加对应属性值即可。<br>执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但其内部函数还持用该“闭包”的引用，所以内部函数可以继续使用“外部函数”中的变量<br>利用了函数作用域链的特性，一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中，函数执行完毕，其执行作用域链销毁，但因内部函数的作用域链仍然在引用这个活动对象，所以其活动对象不会被销毁，直到内部函数被销毁后才被销毁。</p><p>3）优点<br>可以从内部函数访问外部函数的作用域中的变量，且访问到的变量长期驻扎在内存中，可供之后使用<br>避免变量污染全局<br>把变量存到独立的作用域，作为私有成员存在<br>4）缺点<br>对内存消耗有负面影响。因内部函数保存了对外部变量的引用，导致无法被垃圾回收，增大内存使用量，所以使用不当会导致内存泄漏<br>对处理速度具有负面影响。闭包的层级决定了引用的外部变量在查找时经过的作用域链长度<br>可能获取到意外的值(captured value)<br>4）应用场景<br>应用场景一： 典型应用是模块封装，在各模块规范出现之前，都是用这样的方式防止变量污染全局。</p><pre class="line-numbers language-cpp"><code class="language-cpp">var Yideng <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这样声明为模块私有变量，外界无法直接访问</span>    var foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    function <span class="token function">Yideng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    Yideng<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token operator">=</span> function <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> foo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Yideng<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用场景二： 在循环中创建闭包，防止取到意外的值。</p><p>如下代码，无论哪个元素触发事件，都会弹出 3。因为函数执行后引用的 i 是同一个，而 i 在循环结束后就是 3</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可用闭包解决</span>function <span class="token function">makeCallback</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token function">makeCallback</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-this-call-apply-bind"><a href="#1-2-this-call-apply-bind" class="headerlink" title="1.2 this/call/apply/bind"></a>1.2 this/call/apply/bind</h3><hr><h4 id="介绍下javascript里的this"><a href="#介绍下javascript里的this" class="headerlink" title="介绍下javascript里的this"></a>介绍下javascript里的this</h4><p>执行上下文的创建阶段，会分别生成变量对象，建立作用域链，确定this指向。其中变量对象与作用域链我们都已经明白了。本文的关键，就是确定this指向。<br>首先，我们需要得出一个非常重要的，并且一定要牢记于心的结论，this的指向，是在函数被调用的时候确定的。也就是执行上下文被创建时确定的。<br>在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。</p><h4 id="如何改变this的指向"><a href="#如何改变this的指向" class="headerlink" title="如何改变this的指向"></a>如何改变this的指向</h4><p>由call或apply、bind调用：绑定到指定的对象</p><h4 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h4><p><strong>相同点</strong>：1、call和apply的第一个参数thisArg，都是func运行时指定的this。而且，this可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。<br>2、都可以只传递一个参数。<br><strong>不同点</strong>：apply只接收两个参数，第二个参数可以是数组也可以是类数组，其实也可以是对象，后续的参数忽略不计。call接收第二个及以后一系列的参数。bind 方法 与 apply 和 call 比较类似，也能改变函数体内的 this 指向。不同的是，bind 方法的返回值是函数，并且需要稍后调用，才会执行。而 apply 和 call 则是立即调用</p><h4 id="如何实现一个bind"><a href="#如何实现一个bind" class="headerlink" title="如何实现一个bind"></a>如何实现一个bind</h4><p>模拟实现call</p><pre class="line-numbers language-cpp"><code class="language-cpp">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  var context <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment" spellcheck="true">// 给 context 添加一个属性</span>  <span class="token comment" spellcheck="true">// getValue.call(a, 'mei', '24') => a.fn = getValue</span>  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// 将 context 后面的参数取出来</span>  var args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// getValue.call(a, 'mei', '24') => a.fn('mei', '24')</span>  var result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除 fn</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let a <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>function <span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>getValue<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'mei'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mei 24 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟实现apply</p><pre class="line-numbers language-cpp"><code class="language-cpp">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    var context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    var result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let a <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>function <span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>getValue<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'mei'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mei 24 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟实现bind</p><pre class="line-numbers language-cpp"><code class="language-cpp">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof <span class="token keyword">this</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    var _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    var args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> function <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> instanceof F<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">_this</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let a <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>function <span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>getValue<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'mei'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mei 24 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-原型-继承"><a href="#1-3-原型-继承" class="headerlink" title="1.3 原型/继承"></a>1.3 原型/继承</h3><hr><h4 id="介绍一下javascript的原型"><a href="#介绍一下javascript的原型" class="headerlink" title="介绍一下javascript的原型"></a>介绍一下javascript的原型</h4><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 虽然写在注释里，但是你要注意：</span><span class="token comment" spellcheck="true">// prototype是函数才会有的属性</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Kevin'</span><span class="token punctuation">;</span>var person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Kevin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Kevin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：<br><img src="prototype.png" alt></p><h4 id="原型链是什么"><a href="#原型链是什么" class="headerlink" title="原型链是什么"></a>原型链是什么</h4><p>从当前对象出发，通过<strong>proto</strong>属性向上找构造函数的prototype属性，一直找到null而结束，在查找过程中形成的链叫做原型链</p><h4 id="如何利用原型实现继承"><a href="#如何利用原型实现继承" class="headerlink" title="如何利用原型实现继承"></a>如何利用原型实现继承</h4><p>1、原型链继承</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实现原型链的一种基本模式</span>function <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承，用 SuperType 类型的一个实例来重写 SubType 类型的原型对象</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、借用构造函数继承（也称伪造对象或经典继承）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 在子类型构造函数的内部调用超类型构造函数；使用 apply() 或 call() 方法将父对象的构造函数绑定在子对象上</span>function <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 定义引用类型值属性</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 继承 SuperType，在这里还可以给超类型构造函数传参</span>            SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>var instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "red,green,blue,purple"</span>var instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "red,green,blue"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、组合继承（也称伪经典继承）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 将原型链和借用构造函数的技术组合到一块。使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有自己的属性。</span>function <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 借用构造函数方式继承属性</span>            SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原型链方式继承方法</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token string">"luochen"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "red,green,blue,purple"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "red,green,blue"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、原型式继承</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。</span><span class="token number">1</span>、自定义一个函数来实现原型式继承function <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>            function <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>使用 Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法实现原型式继承var person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">"luochen"</span><span class="token punctuation">,</span>            colors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span> var anotherPerson1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token punctuation">{</span>                    value<span class="token operator">:</span> <span class="token string">"tom"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var anotherPerson2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token punctuation">{</span>                    value<span class="token operator">:</span> <span class="token string">"jerry"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>anotherPerson1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "tom"</span><span class="token function">alert</span><span class="token punctuation">(</span>anotherPerson2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "jerry"</span><span class="token function">alert</span><span class="token punctuation">(</span>anotherPerson1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "red,green,blue,purple"</span><span class="token function">alert</span><span class="token punctuation">(</span>anotherPerson2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "red,green,bule,purple";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、寄生式继承</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回这个对象</span>function <span class="token function">createPerson</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">{</span>            var clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过 Object.create() 函数创建一个新对象</span>            clone<span class="token punctuation">.</span>sayGood <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 增强这个对象</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello world！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> clone<span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// 返回这个对象 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、寄生组合式继承</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型</span>function <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>function <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>            SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建超类型原型的一个副本</span>var anotherPrototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重设因重写原型而失去的默认的 constructor 属性</span>anotherPrototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将新创建的对象赋值给子类型的原型</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> anotherPrototype<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token string">"luochen"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "red,green,blue,purple"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "red,green,blue"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-Promise"><a href="#1-4-Promise" class="headerlink" title="1.4 Promise"></a>1.4 Promise</h3><hr><h4 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h4><p>Promise 是异步编程的一种解决方案：<br>从语法上讲，promise是一个对象，从它可以获取异步操作的消息；从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。<br>promise有三种状态：<strong>pending(等待态)</strong>，<strong>fulfiled(成功态)</strong>，*<em>rejected(失败态); *</em> 状态一旦改变，就不会再变。创造promise实例后，它会立即执行。<br>promise是用来解决两个问题的：</p><ul><li>回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象</li><li>promise可以支持多个并发的请求，获取并发请求中的数据</li><li>这个promise可以解决异步的问题，本身不能说promise是异步的</li></ul><h4 id="es6-promise用法大全"><a href="#es6-promise用法大全" class="headerlink" title="es6 promise用法大全"></a>es6 promise用法大全</h4><p>Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。</p><p>那就new一个</p><pre class="line-numbers language-cpp"><code class="language-cpp">let p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//做一些异步操作</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是成功！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise的构造函数接收一个参数：函数，并且这个函数需要传入两个参数：<br>resolve ：异步操作执行成功后的回调函数<br>reject：异步操作执行失败后的回调函数</p><h5 id="then-链式操作的用法"><a href="#then-链式操作的用法" class="headerlink" title="then 链式操作的用法"></a>then 链式操作的用法</h5><p>所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：  </p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reject的用法"><a href="#reject的用法" class="headerlink" title="reject的用法 :"></a>reject的用法 :</h5><p>把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    let p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些异步操作</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            var num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成1-10的随机数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数字太大了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据。多次运行这段代码，你会随机得到下面两种结果：<br>resolved 5或者rejected 数字太大</p><h5 id="catch的用法"><a href="#catch的用法" class="headerlink" title="catch的用法"></a>catch的用法</h5><p>我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用的呢？其实它和then的第二个参数一样，用来指定reject的回调。用法是这样：</p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。请看下面的代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>somedata<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的somedata未定义</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resolve的回调中，我们console.log(somedata);而somedata这个变量是没有被定义的。如果我们不用Promise，代码运行到这里就直接在控制台报错了，不往下运行了。但是在这里，会得到这样的结果：<br><img src="resolved.png" alt><br>也就是说进到catch方法里面去了，而且把错误原因传到了reason参数中。即便是有错误的代码也不会报错了，这与我们的try/catch语句有相同的功能</p><h5 id="all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象"><a href="#all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象" class="headerlink" title="all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象"></a>all的用法：谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象</h5><p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。看下面的例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let Promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>let Promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>let Promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>let p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise1<span class="token punctuation">,</span> Promise2<span class="token punctuation">,</span> Promise3<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">funciton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 三个都成功则成功  </span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 只要有失败，则失败 </span><span class="token punctuation">}</span><span class="token punctuation">)</span>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="race的用法：谁跑的快，以谁为准执行回调"><a href="#race的用法：谁跑的快，以谁为准执行回调" class="headerlink" title="race的用法：谁跑的快，以谁为准执行回调"></a>race的用法：谁跑的快，以谁为准执行回调</h5><p>race的使用场景：比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//请求某个图片资源</span>    function <span class="token function">requestImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            var img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'图片的路径'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//延时函数，用于给请求计时</span>    function <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'图片请求超时'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">requestImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>requestImg函数会异步请求一张图片，我把地址写为”图片的路径”，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法，执行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。运行结果如下：<br><img src="race.png" alt><br>好了，我相信大家对用法已经懂了，那么我们来手写一款自己的promise吧</p><h4 id="如何实现一个Promise-Promise-A"><a href="#如何实现一个Promise-Promise-A" class="headerlink" title="如何实现一个Promise (Promise A+)"></a>如何实现一个Promise (Promise A+)</h4><h5 id="步骤一：实现成功和失败的回调方法"><a href="#步骤一：实现成功和失败的回调方法" class="headerlink" title="步骤一：实现成功和失败的回调方法"></a>步骤一：实现成功和失败的回调方法</h5><p>要实现上面代码中的功能，也是promise最基本的功能。首先，需要创建一个构造函数promise，创建一个promisel类，在使用的时候传入了一个执行器executor，executor会传入两个参数：成功(resolve)和失败(reject)。之前说过，只要成功，就不会失败，只要失败就不会成功。所以，默认状态下，在调用成功时，就返回成功态，调用失败时，返回失败态。代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认状态是等待状态</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'panding'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存放成功的回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存放失败的回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        let resolve <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//this指的是实例</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"resolved"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        let reject <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//执行时可能会发生异常</span>            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//promise失败了</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>promise A+规范规定，在有异常错误时，则执行失败函数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">constructor</span> <span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="步骤二：then方法链式调用"><a href="#步骤二：then方法链式调用" class="headerlink" title="步骤二：then方法链式调用"></a>步骤二：then方法链式调用</h5><p>then方法是promise的最基本的方法，返回的是两个回调，一个成功的回调，一个失败的回调，实现过程如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token function">then</span><span class="token punctuation">(</span>onFulFilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'resolved'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//成功状态的回调</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//失败状态的回调</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">let p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的结果是：<br>我是成功<br>我是成功<br>我是成功<br>为了实现这样的效果，则上一次的代码将要重新写过，我们可以把每次调用resolve的结果存入一个数组中，每次调用reject的结果存入一个数组。这就是为何会在上面定义两个数组,且分别在resolve()和reject()遍历两个数组的原因。因此，在调用resolve()或者reject()之前，我们在pending状态时，会把多次then中的结果存入数组中，则上面的代码会改变为：</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token function">then</span><span class="token punctuation">(</span>onFulFilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'resolved'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前既没有完成 也没有失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 存放成功的回调</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 存放失败的回调</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在promise中，要实现链式调用返回的结果是返回一个新的promise，第一次then中返回的结果，无论是成功或失败，都将返回到下一次then中的成功态中，但在第一次then中如果抛出异常错误，则将返回到下一次then中的失败态中链式调用成功时链式调用成功会返回值，有多种情况，根据举的例子，大致列出可能会发生的结果。因此将链式调用返回的值单独写一个方法。方法中传入四个参数，分别是p2,x,resolve,reject,p2指的是上一次返回的promise，x表示运行promise返回的结果，resolve和reject是p2的方法。则代码写为：</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">resolvePromise</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回结果不能是自己</p><pre class="line-numbers language-cpp"><code class="language-cpp">var p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resovle<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//返回的结果不能是自己，</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当返回结果是自己时，永远也不会成功或失败，因此当返回自己时，应抛出一个错误</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">resolvePromise</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">==</span><span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">'自己引用自己了'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果可能是promise</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断x是不是promise</span>    <span class="token comment" spellcheck="true">//规范中规定：我们允许别人乱写，这个代码可以实现我们的promise和别人的promise 进行交互</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>promise2 <span class="token operator">==</span><span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不能自己等待自己完成</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">'循环引用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// x是除了null以外的对象或者函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>typeof x <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span> <span class="token operator">||</span> typeof x <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        let called<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止成功后调用失败</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//防止取then是出现异常  object.defineProperty</span>            let then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取x的then方法 {then:{}}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>typeof then <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果then是函数就认为他是promise</span>                <span class="token comment" spellcheck="true">//call第一个参数是this，后面的是成功的回调和失败的回调</span>                then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果Y是promise就继续递归promise</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>y<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//只要失败了就失败了</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//then是一个普通对象，就直接成功即可</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//x = 123 x就是一个普通值 作为下个then成功的参数</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果可能为一个普通值，则直接   resolve(x);<br>Promise一次只能调用成功或者失败<br>也就是当调用成功就不能再调用失败了，如果两个都调用的时候，哪个先调用就执行哪一个。代码部分还是上面那部分个人认为，这个地方比较绕，需要慢慢的一步一步的理清楚。根据promise A+规范原理，promise在自己的框架中，封装了一系列的内置的方法。</p><p>捕获错误的方法 catch()<br>解析全部方法 all()<br>竞赛 race()<br>生成一个成功的promise  resolve()<br>生成一个失败的promise  reject()最后给大家附上全部源码，供大家仔细品读。</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断x是不是promise</span>    <span class="token comment" spellcheck="true">//规范中规定：我们允许别人乱写，这个代码可以实现我们的promise和别人的promise 进行交互</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>promise2 <span class="token operator">==</span><span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不能自己等待自己完成</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TypeError</span><span class="token punctuation">(</span><span class="token string">'循环引用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// x是除了null以外的对象或者函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>typeof x <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span> <span class="token operator">||</span> typeof x <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        let called<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止成功后调用失败</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//防止取then是出现异常  object.defineProperty</span>            let then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取x的then方法 {then:{}}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>typeof then <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果then是函数就认为他是promise</span>                <span class="token comment" spellcheck="true">//call第一个参数是this，后面的是成功的回调和失败的回调</span>                then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果Y是promise就继续递归promise</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>y<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//只要失败了就失败了</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//then是一个普通对象，就直接成功即可</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//x = 123 x就是一个普通值 作为下个then成功的参数</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认状态是等待状态</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'panding'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存放成功的回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存放失败的回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        let resolve <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//this指的是实例</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"resolved"</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        let reject <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//执行时可能会发生异常</span>            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//promise失败了</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">then</span><span class="token punctuation">(</span>onFuiFilled<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//防止值得穿透 </span>        onFuiFilled <span class="token operator">=</span> typeof onFuiFilled <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFuiFilled <span class="token operator">:</span> y <span class="token operator">=</span><span class="token operator">></span> y<span class="token punctuation">;</span>        onRejected <span class="token operator">=</span> typeof onRejected <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token operator">:</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">throw</span> err<span class="token punctuation">;</span><span class="token punctuation">}</span>                let promise2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作为下一次then方法的promise</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>               <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//成功的逻辑 失败的逻辑</span>                        let x <span class="token operator">=</span> <span class="token function">onFuiFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//看x是不是promise 如果是promise取他的结果 作为promise2成功的的结果</span>                        <span class="token comment" spellcheck="true">//如果返回一个普通值，作为promise2成功的结果</span>                        <span class="token comment" spellcheck="true">//resolvePromise可以解析x和promise2之间的关系</span>                        <span class="token comment" spellcheck="true">//在resolvePromise中传入四个参数，第一个是返回的promise，第二个是返回的结果，第三个和第四个分别是resolve()和reject()的方法。</span>                        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span><span class="token punctuation">{</span>                        let x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//在resolvePromise中传入四个参数，第一个是返回的promise，第二个是返回的结果，第三个和第四个分别是resolve()和reject()的方法。</span>                        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//当前既没有完成也没有失败</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//把成功的函数一个个存放到成功回调函数数组中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span><span class="token punctuation">{</span>                            let x <span class="token operator">=</span> <span class="token function">onFuiFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把失败的函数一个个存放到失败回调函数数组中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span><span class="token punctuation">{</span>                            let x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用then后返回一个新的promise</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// catch 方法就是then方法没有成功的简写</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//promises是一个promise的数组</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        let arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr是最终返回值的结果</span>        let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示成功了多少次</span>        function <span class="token function">processData</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span><span class="token operator">=</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">processData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 只要有一个promise成功了 就算成功。如果第一个失败了就失败了</span>Promise<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成一个成功的promise</span>Promise<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成一个失败的promise</span>Promise<span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span>defer <span class="token operator">=</span> Promise<span class="token punctuation">.</span>deferred <span class="token operator">=</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    let dfd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    dfd<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>        dfd<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>        dfd<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dfd<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h4><p>async和await是generator语法糖<br>async用于声明一个function是异步的，不管function是普通函数还是异步函数，通过async修饰之后，返回的都是一个promise对象；而 await 用于等待一个异步方法执行完成。await只能出现在async函数中或者 let value = await promise这种在环境的顶层作用域中使用，比如在window作用顶层函数中可以使用; 但是await可以用来修饰任何函数，通过await修饰的任何函数，表示等待该行数执行之后再往后执行，表明是一个同步的过程。</p><h3 id="1-5-深浅拷贝"><a href="#1-5-深浅拷贝" class="headerlink" title="1.5 深浅拷贝"></a>1.5 深浅拷贝</h3><hr><h4 id="介绍下javaScript的深浅拷贝"><a href="#介绍下javaScript的深浅拷贝" class="headerlink" title="介绍下javaScript的深浅拷贝"></a>介绍下javaScript的深浅拷贝</h4><p>JavaScript存储对象都是存地址的，所以浅拷贝会导致 obj1 和obj2 指向同一块内存地址。改变了其中一方的内容，都是在原来的内存上做修改会导致拷贝对象和源对象都发生改变，而深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互不影响。</p><h4 id="如何实现浅拷贝"><a href="#如何实现浅拷贝" class="headerlink" title="如何实现浅拷贝"></a>如何实现浅拷贝</h4><ol><li>简单的引用复制</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">shallowClone</span><span class="token punctuation">(</span>copyObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  var obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> var i in copyObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> copyObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span>var x <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">:</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> <span class="token punctuation">{</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  c<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var y <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">==</span><span class="token operator">=</span> x<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Object.assign()</li></ol><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><pre class="line-numbers language-cpp"><code class="language-cpp">var x <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">:</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> <span class="token punctuation">{</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  c<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var y <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">==</span><span class="token operator">=</span> x<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何实现深拷贝"><a href="#如何实现深拷贝" class="headerlink" title="如何实现深拷贝"></a>如何实现深拷贝</h4><p>1、Array的slice和concat方法 看起来像深拷贝实际是浅拷贝</p><pre class="line-numbers language-cpp"><code class="language-cpp">var array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> var array_shallow <span class="token operator">=</span> array<span class="token punctuation">;</span> var array_concat <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var array_slice <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">==</span><span class="token operator">=</span> array_shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">==</span><span class="token operator">=</span> array_slice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false，“看起来”像深拷贝</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">==</span><span class="token operator">=</span> array_concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false，“看起来”像深拷贝</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、JSON对象的parse和stringify 懒人专用(正则 函数类型无法拷贝)</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//例1</span>var source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"source"</span><span class="token punctuation">,</span> child<span class="token operator">:</span><span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"child"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> var target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>target<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"target"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//改变target的name属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//source </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//target</span>target<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"target child"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//改变target的child </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//child </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//target child</span><span class="token comment" spellcheck="true">//例2</span>var source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token operator">:</span><span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"child"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> var target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//例3</span>var source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token operator">:</span><span class="token keyword">new</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>var target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、jQuery.extend()方法源码实现<br>4、自己实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> typeObject <span class="token operator">=</span> <span class="token string">'[object Object]'</span><span class="token punctuation">;</span><span class="token keyword">const</span> typeArray <span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否是引用类型</span><span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> typeof target <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取标准类型</span><span class="token keyword">const</span> getType <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理原始类型直接返回(Number BigInt String Boolean Symbol Undefined Null)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于返回</span>    let cloneTarget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理循环引用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已经放入过map的直接返回</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> typeArray<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 数组</span>            cloneTarget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                cloneTarget<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> map<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>        <span class="token keyword">case</span> typeObject<span class="token operator">:</span>            <span class="token comment" spellcheck="true">// 对象</span>            cloneTarget <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                cloneTarget<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cloneTarget<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现深拷贝需要注意哪些问题"><a href="#实现深拷贝需要注意哪些问题" class="headerlink" title="实现深拷贝需要注意哪些问题"></a>实现深拷贝需要注意哪些问题</h4><ol><li>使用Object.assign(newObj, oldObj)；</li></ol><p>只深拷贝了oldObj的第一层，之后的层级仍是浅拷贝。<br>如：oldObj = {a:1, b: 2}; 此时深拷贝没问题<br>如：oldObj = {a:1, b: { c: 4 }}; 此时newObj.a和newObj.b都不会影响oldObj，但newObj.b.c则会影响oldObj。</p><ol start="2"><li><p>使用“…”扩展运算符，细节同上</p></li><li><p>使用JSON.parse(JSON.stringify(oldObj))；</p></li></ol><p>对象内的值为undefined、function、symbol时，会丢失。</p><h4 id="如何解决循环引用的问题"><a href="#如何解决循环引用的问题" class="headerlink" title="如何解决循环引用的问题"></a>如何解决循环引用的问题</h4><p>递归</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">deepCopy1</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个新对象</span>    let result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    let keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>        key <span class="token operator">=</span> null<span class="token punctuation">,</span>        temp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果字段的值也是一个对象则递归操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> typeof temp <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 否则直接赋值给新对象</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    x<span class="token operator">:</span> <span class="token punctuation">{</span>        m<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    y<span class="token operator">:</span> undefined<span class="token punctuation">,</span>    z<span class="token operator">:</span> function <span class="token function">add</span><span class="token punctuation">(</span>z1<span class="token punctuation">,</span> z2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> z1 <span class="token operator">+</span> z2    <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepCopy1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>x<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{x: {m: 1}, y: undefined, z: ƒ, a: Symbol(foo)}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{x: {m: 2}, y: undefined, z: ƒ, a: Symbol(foo)}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的父级引用指的是，当对象的某个属性，正是这个对象本身，此时我们如果进行深拷贝，可能会在子元素-&gt;父对象-&gt;子元素… 这个循环中一直进行，导致栈溢出。比如下面这个例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>z <span class="token operator">=</span> obj1<span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepCopy1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> \\栈溢出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法是: 只需要判断一个对象的字段是否引用了这个对象或这个对象的任意父级即可，可以修改上面的deepCopy1函数:</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">deepCopy2</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> parent<span class="token operator">=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个新对象</span>    let result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    let keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>         key <span class="token operator">=</span> null<span class="token punctuation">,</span>         temp <span class="token operator">=</span> null<span class="token punctuation">,</span>         _parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该字段有父级则需要追溯该字段的父级</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>_parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果该字段引用了它的父级，则为循环引用</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_parent<span class="token punctuation">.</span>originParent <span class="token operator">==</span><span class="token operator">=</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环引用返回同级的新对象</span>            <span class="token keyword">return</span> _parent<span class="token punctuation">.</span>currentParent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        _parent <span class="token operator">=</span> _parent<span class="token punctuation">.</span>parent    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>let i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        temp <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 如果字段的值也是一个新对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;&amp;</span> typeof temp <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//递归执行深拷贝，将同级的待拷贝对象与新对象传递给parent，方便追溯循环引用</span>                originParent<span class="token operator">:</span> obj<span class="token punctuation">,</span>                currentParent<span class="token operator">:</span> result<span class="token punctuation">,</span>                parent<span class="token operator">:</span> parent            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>obj1<span class="token punctuation">.</span>z <span class="token operator">=</span> obj1<span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepCopy2</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-事件机制-Event-Loop"><a href="#1-6-事件机制-Event-Loop" class="headerlink" title="1.6 事件机制/Event Loop"></a>1.6 事件机制/Event Loop</h3><hr><h4 id="如何实现一个事件的发布订阅"><a href="#如何实现一个事件的发布订阅" class="headerlink" title="如何实现一个事件的发布订阅"></a>如何实现一个事件的发布订阅</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 维护事件及监听者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 注册事件监听者     * @param {String} type 事件类型     * @param {Function} cb 回调函数     */</span>    <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发布事件     * @param {String} type 事件类型     * @param  {...any} args 参数列表，把emit传递的参数赋给回调函数     */</span>    <span class="token function">emit</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除某个事件的一个监听者     * @param {String} type 事件类型     * @param {Function} cb 回调函数     */</span>    <span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> targetIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">==</span><span class="token operator">=</span> cb<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetIndex <span class="token operator">!=</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>targetIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除某个事件的所有监听者     * @param {String} type 事件类型     */</span>    <span class="token function">offAll</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>type<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建事件管理器实例</span><span class="token keyword">const</span> ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册一个chifan事件监听者</span>ee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'chifan'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃饭了，我们走！'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发布事件chifan</span>ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'chifan'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以emit传递参数</span>ee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'chifan'</span><span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> food<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`吃饭了，我们去$<span class="token punctuation">{</span>address<span class="token punctuation">}</span>吃$<span class="token punctuation">{</span>food<span class="token punctuation">}</span>！`<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'chifan'</span><span class="token punctuation">,</span> <span class="token string">'三食堂'</span><span class="token punctuation">,</span> <span class="token string">'铁板饭'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时会打印两条信息，因为前面注册了两个chifan事件的监听者</span><span class="token comment" spellcheck="true">// 测试移除事件监听</span><span class="token keyword">const</span> toBeRemovedListener <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个可以被移除的监听者'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>ee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'testoff'</span><span class="token punctuation">,</span> toBeRemovedListener<span class="token punctuation">)</span>ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'testoff'</span><span class="token punctuation">)</span>ee<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'testoff'</span><span class="token punctuation">,</span> toBeRemovedListener<span class="token punctuation">)</span>ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'testoff'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时事件监听已经被移除，不会再有console.log打印出来了</span><span class="token comment" spellcheck="true">// 测试移除chifan的所有事件监听</span>ee<span class="token punctuation">.</span><span class="token function">offAll</span><span class="token punctuation">(</span><span class="token string">'chifan'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时可以看到ee.listeners已经变成空对象了，再emit发送chifan事件也不会有反应了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="画图分析"><a href="#画图分析" class="headerlink" title="画图分析"></a>画图分析</h5><p><img src="subscription.png" alt></p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>发布订阅模式中，对于发布者Publisher和订阅者Subscriber没有特殊的约束，他们好似是匿名活动，借助事件调度中心提供的接口发布和订阅事件，互不了解对方是谁。<br>松散耦合，灵活度高，常用作事件总线<br>易理解，可类比于DOM事件中的dispatchEvent和addEventListener。</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>当事件类型越来越多时，难以维护，需要考虑事件命名的规范，也要防范数据流混乱。</p><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>观察者模式与发布订阅模式相比，耦合度更高，通常用来实现一些响应式的效果。在观察者模式中，只有两个主体，分别是目标对象Subject，观察者Observer。</p><p>观察者需Observer要实现update方法，供目标对象调用。update方法中可以执行自定义的业务代码。<br>目标对象Subject也通常被叫做被观察者或主题，它的职能很单一，可以理解为，它只管理一种事件。Subject需要维护自身的观察者数组observerList，当自身发生变化时，通过调用自身的notify方法，依次通知每一个观察者执行update方法。<br>按照这种定义，我们可以实现一个简单版本的观察者模式。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 观察者</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构造器     * @param {Function} cb 回调函数，收到目标对象通知时执行     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof cb <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'Observer构造器必须传入函数类型！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 被目标对象通知时执行     */</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 目标对象</span><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 维护观察者列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加一个观察者     * @param {Observer} observer Observer实例     */</span>    <span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通知所有的观察者     */</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> observerCallback <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我被通知了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Observer</span><span class="token punctuation">(</span>observerCallback<span class="token punctuation">)</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="画图分析-1"><a href="#画图分析-1" class="headerlink" title="画图分析"></a>画图分析</h5><p>最后也整张图理解下观察者模式：<br><img src="observe.png" alt></p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>角色很明确，没有事件调度中心作为中间者，目标对象Subject和观察者Observer都要实现约定的成员方法。<br>双方联系更紧密，目标对象的主动性很强，自己收集和维护观察者，并在状态变化时主动通知观察者更新。</p><h4 id="JavaScript-执行机制"><a href="#JavaScript-执行机制" class="headerlink" title="JavaScript 执行机制"></a>JavaScript 执行机制</h4><h5 id="执行-amp-运行"><a href="#执行-amp-运行" class="headerlink" title="执行 &amp; 运行"></a>执行 &amp; 运行</h5><p>首先我们需要声明下，JavaScript 的执行和运行是两个不同概念的，执行，一般依赖于环境，比如 node、浏览器、Ringo 等， JavaScript 在不同环境下的执行机制可能并不相同。而今天我们要讨论的 Event Loop 就是 JavaScript 的一种执行方式。所以下文我们还会梳理 node 的执行方式。而运行呢，是指JavaScript 的解析引擎。这是统一的。</p><h5 id="关于-JavaScript"><a href="#关于-JavaScript" class="headerlink" title="关于 JavaScript"></a>关于 JavaScript</h5><p>此篇文章中，这个小标题下，我们只需要牢记一句话: JavaScript 是单线程语言 ，无论HTML5 里面 Web-Worker 还是 node 里面的cluster都是“纸老虎”，而且 cluster 还是进程管理相关。这里读者注意区分：进程和线程。<br>既然 JavaScript 是单线程语言，那么就会存在一个问题，所有的代码都得一句一句的来执行。就像我们在食堂排队打饭，必须一个一个排队点菜结账。那些没有排到的，就得等着~<br><img src="cf.png" alt></p><h5 id="概念梳理"><a href="#概念梳理" class="headerlink" title="概念梳理"></a>概念梳理</h5><p>在详解执行机制之前，先梳理一下 JavaScript 的一些基本概念，方便后面我们说到的时候大伙儿心里有个印象和大概的轮廓。<br>事件循环(Event Loop)<br><img src="Eventloop.png" alt><br>什么是 Event Loop？<br>其实这个概念还是比较模糊的，因为他必须得结合着运行机制来解释。<br>JavaScript 有一个主线程 main thread，和调用栈 call-stack 也称之为执行栈。所有的任务都会放到调用栈中等待主线程来执行。<br>暂且，我们先理解为上图的大圈圈就是 Event Loop 吧！并且，这个圈圈，一直在转圈圈~ 也就是说，JavaScript 的 Event Loop 是伴随着整个源码文件生命周期的，只要当前 JavaScript 在运行中，内部的这个循环就会不断地循环下去，去寻找 queue 里面能执行的 task。</p><h5 id="任务队列-task-queue"><a href="#任务队列-task-queue" class="headerlink" title="任务队列(task queue)"></a>任务队列(task queue)</h5><p>task，就是任务的意思，我们这里理解为每一个语句就是一个任务</p><pre class="line-numbers language-cpp"><code class="language-cpp">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如上语句，其实就是就可以理解为两个 task。<br>而 queue 呢，就是FIFO的队列！<br>所以 Task Queue 就是承载任务的队列。而 JavaScript 的 Event Loop 就是会不断地过来找这个 queue，问有没有 task 可以运行运行。</p><h5 id="同步任务-SyncTask-、异步任务-AsyncTask"><a href="#同步任务-SyncTask-、异步任务-AsyncTask" class="headerlink" title="同步任务(SyncTask)、异步任务(AsyncTask)"></a>同步任务(SyncTask)、异步任务(AsyncTask)</h5><p>同步任务说白了就是主线程来执行的时候立即就能执行的代码，比如:</p><pre class="line-numbers language-cpp"><code class="language-cpp">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is THE LAST TIME'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Nealyang'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码在执行到上述 console 的时候，就会立即在控制台上打印相应结果。<br>而所谓的异步任务就是主线程执行到这个 task 的时候，“唉！你等会，我现在先不执行，等我 xxx 完了以后我再来等你执行” 注意上述我说的是等你来执行。<br>说白了，异步任务就是你先去执行别的 task，等我这 xxx 完之后再往 Task Queue 里面塞一个 task 的同步任务来等待被执行</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上述代码，setTimeout 就是一个异步任务，主线程去执行的时候遇到 setTimeout 发现是一个异步任务，就先注册了一个异步的回调，然后接着执行下面的语句console.log(1),等上面的异步任务等待的时间到了以后，在执行console.log(2)。具体的执行机制会在后面剖析。<br><img src="taskqueue.png" alt><br>主线程自上而下执行所有代码<br>同步任务直接进入到主线程被执行，而异步任务则进入到 Event Table 并注册相对应的回调函数<br>异步任务完成后，Event Table 会将这个函数移入 Event Queue<br>主线程任务执行完了以后，会从Event Queue中读取任务，进入到主线程去执行。<br>循环如上<br>上述动作不断循环，就是我们所说的事件循环(Event Loop)。</p><h5 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token operator">:</span>www<span class="token punctuation">.</span>Nealyang<span class="token punctuation">.</span>com<span class="token punctuation">,</span>    data<span class="token operator">:</span>prams<span class="token punctuation">,</span>    success<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个同步任务'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ajax 请求首先进入到 Event Table ，分别注册了onError和onSuccess回调函数。<br>主线程执行同步任务：console.log(‘这是一个同步任务’);<br>主线程任务执行完毕，看Event Queue是否有待执行的 task,这里是不断地检查，只要主线程的task queue没有任务执行了，主线程就一直在这等着<br>ajax 执行完毕，将回调函数push 到Event Queue。（步骤 3、4 没有先后顺序而言）<br>主线程“终于”等到了Event Queue里有 task可以执行了，执行对应的回调任务。<br>如此往复。</p><h5 id="宏任务-MacroTask-、微任务-MicroTask"><a href="#宏任务-MacroTask-、微任务-MicroTask" class="headerlink" title="宏任务(MacroTask)、微任务(MicroTask)"></a>宏任务(MacroTask)、微任务(MicroTask)</h5><p>JavaScript 的任务不仅仅分为同步任务和异步任务，同时从另一个维度，也分为了宏任务(MacroTask)和微任务(MicroTask)。<br>先说说 MacroTask，所有的同步任务代码都是MacroTask（这么说其实不是很严谨，下面解释）,setTimeout、setInterval、I/O、UI Rendering 等都是宏任务。<br>MicroTask，为什么说上述不严谨我却还是强调所有的同步任务都是 MacroTask 呢，因为我们仅仅需要记住几个 MicroTask 即可，排除法！别的都是 MacroTask。MicroTask 包括：Process.nextTick、Promise.then catch finally(注意我不是说 Promise)、MutationObserver。</p><h5 id="浏览器环境下的-Event-Loop"><a href="#浏览器环境下的-Event-Loop" class="headerlink" title="浏览器环境下的 Event Loop"></a>浏览器环境下的 Event Loop</h5><p>当我们梳理完哪些是 MicroTask ，除了那些别的都是 MacroTask 后，哪些是同步任务，哪些又是异步任务后，这里就应该彻底的梳理下JavaScript 的执行机制了。<br>如开篇说到的，执行和运行是不同的，执行要区分环境。所以这里我们将 Event Loop 的介绍分为浏览器和 Node 两个环境下。<br>先放图镇楼！如果你已经理解了这张图的意思，那么恭喜你，你完全可以直接阅读 Node 环境下的 Event Loop 章节了！<br><img src="eventloop.gif" alt></p><h5 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h5><p>setTimeout 就是等多长时间来执行这个回调函数。setInterval 就是每隔多长时间来执行这个回调。</p><pre class="line-numbers language-cpp"><code class="language-cpp">let startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码，顾名思义，就是等 1s 后再去执行 console。放到浏览器下去执行，OK，如你所愿就是如此。</p><p>但是这次我们在探讨 JavaScript 的执行机制，所以这里我们得探讨下如下代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>startTime<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`开始执行回调的相隔时差：$<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">40000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="settimeout.png" alt><br>如上运行，setTimeout 的回调函数等到 4.7s 以后才执行!而这时候，我们把 setTimeout 的 1s 延迟给删了：</p><pre class="line-numbers language-cpp"><code class="language-cpp">let startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>startTime<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`开始执行回调的相隔时差：$<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">}</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">40000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="settimeout2.png" alt><br>结果依然是等到 4.7s 后才执行setTimeout 的回调。貌似 setTimeout 后面的延迟并没有产生任何效果！<br><img src="settimeout3.png" alt><br>其实这么说，又应该回到上面的那张 JavaScript 执行的流程图了。<br><img src="settimeout4.png" alt><br>setTimeout这里就是简单的异步，我们通过上面的图来分析上述代码的一步一步执行情况</p><p>首先 JavaScript 自上而下执行代码<br>遇到遇到赋值语句、以及第一个 console.log({startTime}) 分别作为一个 task，压入到立即执行栈中被执行。<br>遇到 setTImeout 是一个异步任务，则注册相应回调函数。（异步函数告诉你，js 你先别急，等 1s 后我再将回调函数：console.log(xxx)放到 Task Queue 中）<br>OK，这时候 JavaScript 则接着往下走，遇到了 40000 个 for 循环的 task，没办法，1s 后都还没执行完。其实这个时候上述的回调已经在Task Queue 中了。<br>等所有的立即执行栈中的 task 都执行完了，在回头看 Task Queue 中的任务，发现异步的回调 task 已经在里面了，所以接着执行。<br>打个比方<br>其实上述的不仅仅是 timeout，而是任何异步，比如网络请求等。<br><img src="eventloop2.png" alt><br>就好比，我六点钟下班了，可以安排下自己的活动了!<br>然后收拾电脑(同步任务)、收拾书包(同步任务)、给女朋友打电话说出来吃饭吧(必然是异步任务)，然后女朋友说你等会，我先化个妆，等我画好了call你。<br>那我不能干等着呀，就接着做别的事情，比如那我就在改个 bug 吧，你好了通知我。结果等她一个小时后说我化好妆了，我们出去吃饭吧。不行！我 bug 还没有解决掉呢？你等会。。。。其实这个时候你的一小时化妆还是 5 分钟化妆都已经毫无意义了。。。因为哥哥这会没空~~<br>如果我 bug 在半个小时就解决完了，没别的任务需要执行了，那么就在这等着呀！必须等着！随时待命！。然后女朋友来电话了，我化完妆了，我们出去吃饭吧，那么刚好，我们在你的完成了请求或者 timeout 时间到了后我刚好闲着，那么我必须立即执行了。</p><h5 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h5><p>说完了 setTimeout，当然不能错过他的孪生兄弟：setInterval。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入 Task Queue，如果前面的任务耗时太久，那么同样需要等待。<br>这里需要说的是，对于 setInterval(fn,ms) 来说，我们制定没 xx ms执行一次 fn，其实是没 xx ms，会有一个fn 进入到 Task Queue 中。一旦 setInterval 的回调函数fn执行时间超过了xx ms，那么就完全看不出来有时间间隔了。 仔细回味回味，是不是那么回事？<br>关于 Promise 的用法，这里就不过过多介绍了，后面会在写《【THE LAST TIME】彻底吃透 JavaScript 异步》 一文的时候详细介绍。这里我们只说 JavaScript 的执行机制。<br>如上所说，promise.then 、catch 和 finally 是属于 MicroTask。这里主要是异步的区分。展开说明之前，我们结合上述说的，再来“扭曲”梳理一下。<br>为了避免初学者这时候脑子有点混乱，我们暂时忘掉 JavaScript 异步任务！ 我们暂且称之为待会再执行的同步任务。<br>有了如上约束后，我们可以说，JavaScript 从一开始就自上而下的执行每一个语句(Task),这时候只能遇到立马就要执行的任务和待会再执行的任务。对于那待会再执行的任务等到能执行了，也不会立即执行，你得等js 执行完这一趟才行<br>再打个比方<br>就像做公交车一样，公交车不等人呀，公交车路线上有人就会停（农村公交！么得站牌），但是等公交车来，你跟司机说，我肚子疼要拉x~这时候公交不会等你。你只能拉完以后等公交下一趟再来（大山里！一个路线就一趟车）。<br>OK！你拉完了。。。等公交，公交也很快到了！但是，你不能立马上车，因为这时候前面有个孕妇！有个老人！还有熊孩子，你必须得让他们先上车，然后你才能上车！<br>而这些 孕妇、老人、熊孩子所组成的就是传说中的 MicroTask Queue,而且，就在你和你的同事、朋友就必须在他们后面上车。<br>这里我们没有异步的概念，只有同样的一次循环回来，有了两种队伍，一种优先上车的队伍叫做MicroTask Queue，而你和你的同事这帮壮汉组成的队伍就是宏队伍(MacroTask Queue)。<br><img src="eventloop3.png" alt><br>一句话理解：一次事件循环回来后，开始去执行 Task Queue 中的 task，但是这里的 task 有优先级。所以优先执行 MicroTask Queue 中的 task ，执行完后在执行MacroTask Queue 中的 task</p><h5 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h5><p>关于 Promise 的用法，这里就不过过多介绍了，后面会在写《【THE LAST TIME】彻底吃透 JavaScript 异步》 一文的时候详细介绍。这里我们只说 JavaScript 的执行机制。<br>如上所说，promise.then 、catch 和 finally 是属于 MicroTask。这里主要是异步的区分。展开说明之前，我们结合上述说的，再来“扭曲”梳理一下。<br>为了避免初学者这时候脑子有点混乱，我们暂时忘掉 JavaScript 异步任务！ 我们暂且称之为待会再执行的同步任务。<br>有了如上约束后，我们可以说，JavaScript 从一开始就自上而下的执行每一个语句(Task),这时候只能遇到立马就要执行的任务和待会再执行的任务。对于那待会再执行的任务等到能执行了，也不会立即执行，你得等js 执行完这一趟才行<br>再打个比方<br>就像做公交车一样，公交车不等人呀，公交车路线上有人就会停（农村公交！么得站牌），但是等公交车来，你跟司机说，我肚子疼要拉x~这时候公交不会等你。你只能拉完以后等公交下一趟再来（大山里！一个路线就一趟车）。<br>OK！你拉完了。。。等公交，公交也很快到了！但是，你不能立马上车，因为这时候前面有个孕妇！有个老人！还有熊孩子，你必须得让他们先上车，然后你才能上车！<br>而这些 孕妇、老人、熊孩子所组成的就是传说中的 MicroTask Queue,而且，就在你和你的同事、朋友就必须在他们后面上车。<br>这里我们没有异步的概念，只有同样的一次循环回来，有了两种队伍，一种优先上车的队伍叫做MicroTask Queue，而你和你的同事这帮壮汉组成的队伍就是宏队伍(MacroTask Queue)。<br><img src="eventloop4.png" alt><br>一句话理解：一次事件循环回来后，开始去执行 Task Queue 中的 task，但是这里的 task 有优先级。所以优先执行 MicroTask Queue 中的 task ，执行完后在执行MacroTask Queue 中的 task<br>小试牛刀<br>理论都扯完了，也不知道你懂没懂。来，期中考试了！</p><pre class="line-numbers language-cpp"><code class="language-cpp">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Node-环境下的-Event-Loop"><a href="#Node-环境下的-Event-Loop" class="headerlink" title="Node 环境下的 Event Loop"></a>Node 环境下的 Event Loop</h5><p>Node中的Event Loop是基于libuv实现的，而libuv是 Node 的新跨平台抽象层，libuv使用异步，事件驱动的编程方式，核心是提供i/o的事件循环和异步回调。libuv的API包含有时间，非阻塞的网络，异步文件操作，子进程等等。<br>Event Loop就是在libuv中实现的。所以关于 Node 的 Event Loop学习，有两个官方途径可以学习:</p><p><a href="http://docs.libuv.org/en/v1.x/design.html" target="_blank" rel="noopener">libuv 文档</a><br>官网的<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">What is the Event Loop?.</a></p><p>在学习 Node 环境下的 Event Loop 之前呢，我们首先要明确执行环境，Node 和浏览器的Event Loop是两个有明确区分的事物，不能混为一谈。nodejs的event是基于libuv，而浏览器的event loop则在html5的规范中明确定义。</p><pre class="line-numbers language-cpp"><code class="language-cpp">   ┌───────────────────────────┐┌─<span class="token operator">></span>│           timers          ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │     pending callbacks     ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │       idle<span class="token punctuation">,</span> prepare       ││  └─────────────┬─────────────┘      ┌───────────────┐│  ┌─────────────┴─────────────┐      │   incoming<span class="token operator">:</span>   ││  │           poll            │<span class="token operator">&lt;</span>─────┤  connections<span class="token punctuation">,</span> ││  └─────────────┬─────────────┘      │   data<span class="token punctuation">,</span> etc<span class="token punctuation">.</span>  ││  ┌─────────────┴─────────────┐      └───────────────┘│  │           check           ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐└──┤      close callbacks      │   └───────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Node 的 Event Loop 分为 6 个阶段：</p><h5 id="timers-阶段"><a href="#timers-阶段" class="headerlink" title="timers 阶段"></a>timers 阶段</h5><p>timers：执行setTimeout() 和 setInterval()中到期的callback。<br>pending callback: 上一轮循环中有少数的I/O callback会被延迟到这一轮的这一阶段执行<br>idle, prepare：仅内部使用<br>poll: 最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段<br>check: 执行setImmediate的callback<br>close callbacks: 执行close事件的callback，例如socket.on(‘close’[,fn])、http.server.on(‘close, fn)<br>上面六个阶段都不包括 process.nextTick()(下文会介绍)<br><img src="eventloop5.png" alt><br>整体的执行机制如上图所示，下面我们具体展开每一个阶段的说明<br>timers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 poll 阶段控制的。<br>在 timers 阶段其实使用一个最小堆而不是队列来保存所有的元素，其实也可以理解，因为timeout的callback是按照超时时间的顺序来调用的，并不是先进先出的队列逻辑）。而为什么 timer 阶段在第一个执行阶梯上其实也不难理解。在 Node 中定时器指定的时间也是不准确的，而这样，就能尽可能的准确了，让其回调函数尽快执行。<br>以下是官网给出的例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Assume this takes 95ms to complete</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> timeoutScheduled <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> delay <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timeoutScheduled<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`$<span class="token punctuation">{</span>delay<span class="token punctuation">}</span>ms have passed since I was scheduled`<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// do someAsyncOperation which takes 95 ms to complete</span><span class="token function">someAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> startCallback <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// do something that will take 10ms...</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startCallback <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do nothing</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当进入事件循环时，它有一个空队列（fs.readFile()尚未完成），因此定时器将等待剩余毫秒数，当到达95ms时，fs.readFile()完成读取文件并且其完成需要10毫秒的回调被添加到轮询队列并执行。<br>当回调结束时，队列中不再有回调，因此事件循环将看到已达到最快定时器的阈值，然后回到timers阶段以执行定时器的回调。<br>在此示例中，您将看到正在调度的计时器与正在执行的回调之间的总延迟将为105毫秒。</p><h5 id="pending-callbacks-阶段"><a href="#pending-callbacks-阶段" class="headerlink" title="pending callbacks 阶段"></a>pending callbacks 阶段</h5><p>pending callbacks 阶段其实是 I/O 的 callbacks 阶段。比如一些 TCP 的 error 回调等。<br>举个栗子：如果TCP socket ECONNREFUSED在尝试connect时receives，则某些* nix系统希望等待报告错误。 这将在pending callbacks阶段执行。</p><h5 id="poll-阶段"><a href="#poll-阶段" class="headerlink" title="poll 阶段"></a>poll 阶段</h5><p>poll 阶段主要有两个功能：</p><p>执行 I/O 回调<br>处理 poll 队列（poll queue）中的事件</p><p>当时Event Loop 进入到 poll 阶段并且 timers 阶段没有任何可执行的 task 的时候（也就是没有定时器回调），将会有以下两种情况</p><p>如果 poll queue 非空，则 Event Loop就会执行他们，知道为空或者达到system-dependent(系统相关限制)<br>如果 poll queue 为空，则会发生以下一种情况</p><p>如果setImmediate()有回调需要执行，则会立即进入到 check 阶段<br>相反，如果没有setImmediate()需要执行，则 poll 阶段将等待 callback 被添加到队列中再立即执行，这也是为什么我们说 poll 阶段可能会阻塞的原因。</p><p>一旦 poll queue 为空，Event Loop就回去检查timer 阶段的任务。如果有的话，则会回到 timer 阶段执行回调。</p><h5 id="check-阶段"><a href="#check-阶段" class="headerlink" title="check 阶段"></a>check 阶段</h5><p>check 阶段在 poll 阶段之后，setImmediate()的回调会被加入check队列中，他是一个使用libuv API 的特殊的计数器。<br>通常在代码执行的时候，Event Loop 最终会到达 poll 阶段，然后等待传入的链接或者请求等，但是如果已经指定了setImmediate()并且这时候 poll 阶段已经空闲的时候，则 poll 阶段将会被中止然后开始 check 阶段的执行</p><h5 id="close-callbacks-阶段"><a href="#close-callbacks-阶段" class="headerlink" title="close callbacks 阶段"></a>close callbacks 阶段</h5><p>如果一个 socket 或者事件处理函数突然关闭/中断(比如：socket.destroy()),则这个阶段就会发生 close 的回调执行。否则他会通过 process.nextTick() 发出。</p><h5 id="setImmediate-vs-setTimeout"><a href="#setImmediate-vs-setTimeout" class="headerlink" title="setImmediate() vs setTimeout()"></a>setImmediate() vs setTimeout()</h5><p>setImmediate() 和 setTimeout()非常的相似，区别取决于谁调用了它。</p><p>setImmediate在 poll 阶段后执行，即check 阶段<br>setTimeout 在 poll 空闲时且设定时间到达的时候执行，在 timer 阶段</p><p>计时器的执行顺序将根据调用它们的上下文而有所不同。 如果两者都是从主模块中调用的，则时序将受到进程性能的限制。<br>例如，如果我们运行以下不在I / O周期（即主模块）内的脚本，则两个计时器的执行顺序是不确定的，因为它受进程性能的约束：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// timeout_vs_immediate.js</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'immediate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">$ node timeout_vs_immediate<span class="token punctuation">.</span>jstimeoutimmediate$ node timeout_vs_immediate<span class="token punctuation">.</span>jsimmediatetimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在一个I/O 周期内移动这两个调用，则始终首先执行立即回调：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// timeout_vs_immediate.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'immediate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">$ node timeout_vs_immediate<span class="token punctuation">.</span>jsimmediatetimeout$ node timeout_vs_immediate<span class="token punctuation">.</span>jsimmediatetimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以与setTimeout（）相比，使用setImmediate（）的主要优点是，如果在I / O周期内安排了任何计时器，则setImmediate（）将始终在任何计时器之前执行，而与存在多少计时器无关。</p><h5 id="nextTick-queue"><a href="#nextTick-queue" class="headerlink" title="nextTick queue"></a>nextTick queue</h5><p>可能你已经注意到process.nextTick（）并未显示在图中，即使它是异步API的一部分。 所以他拥有一个自己的队列：nextTickQueue。<br>这是因为process.nextTick（）从技术上讲不是Event Loop的一部分。 相反，无论当前事件循环的当前阶段如何，都将在当前操作完成之后处理nextTickQueue。<br>如果存在 nextTickQueue，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer1'</span><span class="token punctuation">)</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick'</span><span class="token punctuation">)</span> process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick'</span><span class="token punctuation">)</span>   process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick'</span><span class="token punctuation">)</span>     process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// nextTick=>nextTick=>nextTick=>nextTick=>timer1=>promise1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a>process.nextTick() vs setImmediate()</h5><p>从使用者角度而言，这两个名称非常的容易让人感觉到困惑。</p><p>process.nextTick（）在同一阶段立即触发<br>setImmediate（）在事件循环的以下迭代或“tick”中触发</p><p>貌似这两个名称应该呼唤下！的确~官方也这么认为。但是他们说这是历史包袱，已经不会更改了。<br>这里还是建议大家尽可能使用setImmediate。因为更加的让程序可控容易推理。<br>至于为什么还是需要 process.nextTick，存在即合理。这里建议大家阅读官方文档：<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#why-use-process-nexttick" target="_blank" rel="noopener">why-use-process-nexttick</a>。</p><h5 id="Node与浏览器的-Event-Loop-差异"><a href="#Node与浏览器的-Event-Loop-差异" class="headerlink" title="Node与浏览器的 Event Loop 差异"></a>Node与浏览器的 Event Loop 差异</h5><p>一句话总结其中：浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务。<br><img src="eventloop6.png" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-函数式编程"><a href="#1-7-函数式编程" class="headerlink" title="1.7 函数式编程"></a>1.7 函数式编程</h3><hr><p><strong>定义</strong><br>函数式编程（Functional Programming，后面简称FP），维基百科的定义是：</p><p>是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。比起命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p><p>我来尝试理解下这个定义，好像就是说，在敲代码的时候，我要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果。而且可以把函数作为输入输出。感觉好像平常写js时，就是这样的嘛！</p><p><strong>特性</strong><br>网上FP的定义与特性琳琅满目。各种百科、博客、一些老师的网站上都有大同小异的介绍。为了方便阅读，我列下几个好像比较重要的特性，并附上我的第一眼理解。</p><p>函数是一等公民。就是说函数可以跟其他变量一样，可以作为其他函数的输入输出。喔，回调函数就是典型应用。</p><p>不可变量。就是说，不能用var跟let咯。按这要求，我似乎有点难写代码。</p><p>纯函数。就是没有副作用的函数。这个好理解，就是不修改函数外部的变量。</p><p>引用透明。这个也好理解，就是说同样的输入，必定是同样的输出。函数内部不依赖外部状态，如一些全局变量。</p><p>惰性计算。大意就是：一个表达式绑定的变量，不是声明的时候就计算出来，而是真正用到它的时候才去计算。</p><p>还有一些衍生的特性，如柯里化与组合，三言两语说不清，就不阐述了，有兴趣的同学可以自己再了解了解。</p><h3 id="1-8-Service-Worker-PWA"><a href="#1-8-Service-Worker-PWA" class="headerlink" title="1.8 Service Worker / PWA"></a>1.8 Service Worker / PWA</h3><hr><p>Service Worker是什么<br>MDN 的介绍：<br><strong>Service Worker</strong> 是一个浏览器背后运行的脚步，独立于 web 页面，为无需一个页面或用户交互的功能打开了大门。今日，它包含了推送通知和背景异步（push notifications and background sync）的功能。将来，Service Worker 将支持包括 periodic sync or geofencing 的功能。<br>什么是PWA？<br>渐进式网络应用（PWA）是谷歌在2015年底提出的概念。基本上算是web应用程序，但在外观和感觉上与原生app类似。支持PWA的网站可以提供脱机工作、推送通知和设备硬件访问等功能。</p><h3 id="1-9-Web-Worker"><a href="#1-9-Web-Worker" class="headerlink" title="1.9 Web Worker"></a>1.9 Web Worker</h3><hr><p>Web Worker 是HTML5标准的一部分，这一规范定义了一套 API，它允许一段JavaScript程序运行在主线程之外的另外一个线程中。值得注意的是， Web Worker 规范中定义了两类工作线程，分别是专用线程Dedicated Worker和共享线程 Shared Worker，其中，Dedicated Worker只能为一个页面所使用，而Shared Worker则可以被多个页面所共享。</p><h3 id="1-10-常用方法"><a href="#1-10-常用方法" class="headerlink" title="1.10 常用方法"></a>1.10 常用方法</h3><hr><p><strong>JavaScript中检测数组的方法</strong><br>(1)、typeof操作符</p><p>这种方法对一些常用的类型检查没有问题，但对array和null 都判断为object<br>(2)、instanceof操作符</p><p>这个操作符是检测对象的原型链是否指向构造函数的prototype对象的<br>(3)、对象的constructor属性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">==</span><span class="token operator">=</span> Array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(4)、Object.prototype.toString</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(5)、Array.isArray()<br><strong>常用的字符串操作</strong><br>字符串转化toString()<br>字符串分隔split()<br>字符串替换replace()<br>获取长度length<br>查询子字符串 indexOf<br>返回指定位置的字符串或字符串编码 charAt charCodeAt<br>字符串匹配 match<br>字符串拼接concat<br>字符串的切割或提取slice() substring() substr()<br>字符串大小写转化 toLowerCase toUpperCase<br>字符串去空格 trim() 用来删除字符串前后的空格<br>其中第9中三者的区别如下：<br>（1）slice(), 参数可以是负数，负数表示从字符串最后一个位置开始切割到对应结束位置<br>（2）substring()，参数不可为负数，切割第一个位置到第二个位置的字符串<br>（3）substr()， 参数可以是负数，第一个参数是开始位置，第二个参数为切割的长度<br>字符串去重<br><strong>常用的数组操作</strong><br>1、Array.map()<br>此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组<br>2、Array.forEach()<br>此方法是将数组中的每个元素执行传进提供的函数，没有返回值，注意和map方法区分<br>3、Array.filter()<br>此方法是将满足条件的元素作为一个新数组返回<br>4、Array.every()<br>此方法将数组所有元素进行判断返回一个布尔值，如果所有元素都符合判断条件，则返回true，否则返回false<br>5、Array.some()<br>此方法将数组所有元素进行判断返回一个布尔值, 如果有一个元素满足判断条件，则返回true，所有元素都不满足则返回false<br>6、Array.reduce()<br>此方法为所有元素调用返回函数<br>7、Array.push()<br>在数组最后面添加新元素<br>8、Array.shift()<br>删除数组第一个元素<br>9、Array.pop()<br>删除数组最后一个元素<br>10、Array.unshift()<br>在数组最前面增加元素<br>11、Array.isArray()<br>判断是否为一个数组<br>12、Array.concat()<br>数组拼接<br>13、Array.toString()<br>数组转化为字符串<br>14、Array.join()<br>数组转化为字符串，并用第一个参数作为连接符<br>15、Array.splice(开始位置，删除个数，元素)<br>其中reduce使用方法为：</p><pre class="line-numbers language-cpp"><code class="language-cpp">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>callback （执行数组中每个值的函数，包含四个参数）<br>1、accumulator （上一次调用回调返回的值，或者是提供的初始值（initialValue））<br>2、currentValue （数组中当前被处理的元素）<br>3、index （当前元素在数组中的索引）<br>4、array （调用 reduce 的数组）<br>initialValue 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br><strong>常用对象方法</strong><br>1、Object.assign()<br>用于克隆，两个参数，将第二个对象分配到第一个中<br>2、Object.is()<br>用于判断两个值是否相同<br>//注意，该函数与==运算符不同，不会强制转换任何类型， 应该更加类似于===，但值得注意的是它会将+0和-0视作不同值<br>3、Object.keys()<br>用于返回对象可枚举的属性和方法的名称，返回一个属性或方法名称的字符串数组。<br>4、Object.defineProperty()<br>劫持变量的set和get方法, 将属性添加到对象，或修改现有属性的特性</p><pre class="line-numbers language-cpp"><code class="language-cpp">var a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    value <span class="token operator">:</span> <span class="token string">'kong'</span><span class="token punctuation">,</span>    enumerable <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//该属性是否可枚举</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、Object.defineProperties()<br>可添加多个属性, 与Object.defineProperty()对应,<br>6、isPrototypeOf</p><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> var b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
